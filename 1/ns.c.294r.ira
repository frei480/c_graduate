
;; Function print_conv (print_conv, funcdef_no=40, decl_uid=3195, cgraph_uid=41, symbol_order=40)

Starting decreasing number of live ranges...
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 10 n_edges 12 count 11 (  1.1)
;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9
;;
;; Loop 2
;;  header 6, latch 5
;;  depth 1, outer 0
;;  nodes: 6 5
;;
;; Loop 1
;;  header 3, latch 3
;;  depth 1, outer 0
;;  nodes: 3
;; 2 succs { 3 7 }
;; 3 succs { 3 4 }
;; 4 succs { 6 }
;; 5 succs { 6 }
;; 6 succs { 5 7 }
;; 7 succs { 9 8 }
;; 8 succs { }
;; 9 succs { 1 }
scanning new insn with uid = 86.
verify found no changes in insn with uid = 86.
deleting insn with uid = 11.
Removing SCRATCH to p108 in insn #6 (nop 2)
rescanning insn with uid = 6.
Removing SCRATCH to p109 in insn #59 (nop 3)
rescanning insn with uid = 59.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 10 n_edges 12 count 11 (  1.1)
Reg 106 uninteresting
Reg 107 uninteresting
Reg 92: def dominates all uses has unique first use
Reg 95 uninteresting
Reg 89: def dominates all uses has unique first use
Reg 82: local to bb 3 def dominates all uses has unique first use
Reg 104: def dominates all uses has unique first use
Examining insn 28, def for 82
  all ok
Reg 89 not local to one basic block
Reg 92 not local to one basic block
Reg 104 not local to one basic block
;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9
;;
;; Loop 2
;;  header 6, latch 5
;;  depth 1, outer 0
;;  nodes: 6 5
;;
;; Loop 1
;;  header 3, latch 3
;;  depth 1, outer 0
;;  nodes: 3
;; 2 succs { 3 7 }
;; 3 succs { 3 4 }
;; 4 succs { 6 }
;; 5 succs { 6 }
;; 6 succs { 5 7 }
;; 7 succs { 9 8 }
;; 8 succs { }
;; 9 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
init_insns for 95: (insn_list:REG_DEP_TRUE 86 (nil))
init_insns for 104: (insn_list:REG_DEP_TRUE 74 (nil))
Reg 105 had equivalence, but can't be eliminated

Pass 0 for finding pseudo/allocno costs

    a0 (r109,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a12 (r108,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a14 (r107,l0) best SIREG, allocno SIREG
    a15 (r106,l0) best DIREG, allocno DIREG
    a23 (r105,l1) best DIREG, allocno DIREG
    a19 (r105,l2) best DIREG, allocno DIREG
    a6 (r105,l0) best DIREG, allocno DIREG
    a18 (r104,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a1 (r104,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a3 (r100,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a27 (r97,l1) best AREG, allocno AREG
    a9 (r96,l0) best CREG, allocno CREG
    a11 (r95,l0) best AREG, allocno AREG
    a10 (r94,l0) best DIREG, allocno DIREG
    a22 (r92,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a13 (r92,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a21 (r91,l1) best AREG, allocno AREG
    a7 (r91,l0) best AREG, allocno AREG
    a20 (r90,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a8 (r90,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a25 (r89,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a4 (r89,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a24 (r85,l1) best DREG, allocno DREG
    a17 (r85,l2) best DREG, allocno DREG
    a5 (r85,l0) best DREG, allocno DREG
    a16 (r84,l2) best GENERAL_REGS, allocno GENERAL_REGS
    a2 (r84,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a26 (r82,l1) best GENERAL_REGS, allocno GENERAL_REGS

  a0(r109,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 TLS_GOTBASE_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:660,660 NO_REX_SSE_REGS:660,660 SSE_REGS:660,660 MMX_REGS:1430,1430 INT_SSE_REGS:1430,1430 ALL_REGS:23320,23320 MEM:660,660
  a1(r104,l0) costs: AREG:0,1780 DREG:0,1780 CREG:0,1780 BREG:0,1780 SIREG:0,1780 DIREG:0,1780 AD_REGS:0,1780 CLOBBERED_REGS:0,1780 Q_REGS:0,1780 NON_Q_REGS:0,1780 TLS_GOTBASE_REGS:0,1780 GENERAL_REGS:0,1780 SSE_FIRST_REG:582,5922 NO_REX_SSE_REGS:582,5922 SSE_REGS:582,5922 MMX_REGS:970,12540 INT_SSE_REGS:970,12540 ALL_REGS:10088,198768 MEM:485,5825
  a2(r84,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 TLS_GOTBASE_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:582,20178 NO_REX_SSE_REGS:582,20178 SSE_REGS:582,20178 MMX_REGS:1261,41343 INT_SSE_REGS:1261,41343 ALL_REGS:20564,627420 MEM:582,17704
  a3(r100,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 TLS_GOTBASE_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:1164,1164 NO_REX_SSE_REGS:1164,1164 SSE_REGS:1164,1164 MMX_REGS:2522,2522 INT_SSE_REGS:2522,2522 ALL_REGS:41128,41128 MEM:970,970
  a4(r89,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 TLS_GOTBASE_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:582,5922 NO_REX_SSE_REGS:582,5922 SSE_REGS:582,5922 MMX_REGS:970,6310 INT_SSE_REGS:970,6310 ALL_REGS:10088,99088 MEM:485,1375
  a5(r85,l0) costs: AREG:0,5340 DREG:0,890 CREG:0,5340 BREG:0,5340 SIREG:0,5340 DIREG:0,5340 AD_REGS:0,5340 CLOBBERED_REGS:0,5340 Q_REGS:0,5340 NON_Q_REGS:0,5340 TLS_GOTBASE_REGS:0,5340 GENERAL_REGS:0,5340 SSE_FIRST_REG:0,22552 NO_REX_SSE_REGS:0,22552 SSE_REGS:0,22552 MMX_REGS:0,45994 INT_SSE_REGS:0,45994 ALL_REGS:0,651772 MEM:0,22552
  a6(r105,l0) costs: AREG:440,440 DREG:440,440 CREG:440,440 BREG:440,440 SIREG:440,440 DIREG:220,220 AD_REGS:440,440 CLOBBERED_REGS:440,440 Q_REGS:440,440 NON_Q_REGS:440,440 TLS_GOTBASE_REGS:440,440 GENERAL_REGS:440,440 SSE_FIRST_REG:1540,11632 NO_REX_SSE_REGS:1540,11632 SSE_REGS:1540,11632 MMX_REGS:3080,24946 INT_SSE_REGS:3080,24946 ALL_REGS:46860,403444 MEM:1540,11632
  a7(r91,l0) costs: AREG:0,1780 DREG:0,3560 CREG:0,3560 BREG:0,3560 SIREG:0,3560 DIREG:0,3560 AD_REGS:0,3560 CLOBBERED_REGS:0,3560 Q_REGS:0,3560 NON_Q_REGS:0,3560 TLS_GOTBASE_REGS:0,3560 GENERAL_REGS:0,3560 SSE_FIRST_REG:1320,19120 NO_REX_SSE_REGS:1320,19120 SSE_REGS:1320,19120 MMX_REGS:2090,32350 INT_SSE_REGS:2090,32350 ALL_REGS:34320,502460 MEM:770,13230
  a8(r90,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 TLS_GOTBASE_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:660,22020 NO_REX_SSE_REGS:660,22020 SSE_REGS:660,22020 MMX_REGS:660,44270 INT_SSE_REGS:660,44270 ALL_REGS:11000,669600 MEM:110,18800
  a9(r96,l0) costs: AREG:880,880 DREG:880,880 CREG:440,440 BREG:880,880 SIREG:880,880 DIREG:880,880 AD_REGS:880,880 CLOBBERED_REGS:880,880 Q_REGS:880,880 NON_Q_REGS:880,880 TLS_GOTBASE_REGS:880,880 GENERAL_REGS:880,880 SSE_FIRST_REG:2420,2420 NO_REX_SSE_REGS:2420,2420 SSE_REGS:2420,2420 MMX_REGS:3960,3960 INT_SSE_REGS:3960,3960 ALL_REGS:58080,58080 MEM:1870,1870
  a10(r94,l0) costs: AREG:440,440 DREG:440,440 CREG:440,440 BREG:440,440 SIREG:440,440 DIREG:220,220 AD_REGS:440,440 CLOBBERED_REGS:440,440 Q_REGS:440,440 NON_Q_REGS:440,440 TLS_GOTBASE_REGS:440,440 GENERAL_REGS:440,440 SSE_FIRST_REG:880,880 NO_REX_SSE_REGS:880,880 SSE_REGS:880,880 MMX_REGS:1650,1650 INT_SSE_REGS:1650,1650 ALL_REGS:23540,23540 MEM:880,880
  a11(r95,l0) costs: AREG:220,220 DREG:440,440 CREG:440,440 BREG:440,440 SIREG:440,440 DIREG:440,440 AD_REGS:440,440 CLOBBERED_REGS:440,440 Q_REGS:440,440 NON_Q_REGS:440,440 TLS_GOTBASE_REGS:440,440 GENERAL_REGS:440,440 SSE_FIRST_REG:1540,1540 NO_REX_SSE_REGS:1540,1540 SSE_REGS:1540,1540 MMX_REGS:2310,2310 INT_SSE_REGS:2310,2310 ALL_REGS:34540,34540 MEM:990,990
  a12(r108,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 TLS_GOTBASE_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:660,660 NO_REX_SSE_REGS:660,660 SSE_REGS:660,660 MMX_REGS:1430,1430 INT_SSE_REGS:1430,1430 ALL_REGS:23320,23320 MEM:660,660
  a13(r92,l0) costs: AREG:0,1780 DREG:0,1780 CREG:0,1780 BREG:0,1780 SIREG:0,1780 DIREG:0,1780 AD_REGS:0,1780 CLOBBERED_REGS:0,1780 Q_REGS:0,1780 NON_Q_REGS:0,1780 TLS_GOTBASE_REGS:0,1780 GENERAL_REGS:0,1780 SSE_FIRST_REG:660,13120 NO_REX_SSE_REGS:660,13120 SSE_REGS:660,13120 MMX_REGS:660,25580 INT_SSE_REGS:660,25580 ALL_REGS:11000,390140 MEM:110,10790
  a14(r107,l0) costs: AREG:220,220 DREG:220,220 CREG:220,220 BREG:220,220 SIREG:-110,-110 DIREG:220,220 AD_REGS:220,220 CLOBBERED_REGS:220,220 Q_REGS:220,220 NON_Q_REGS:220,220 TLS_GOTBASE_REGS:220,220 GENERAL_REGS:220,220 SSE_FIRST_REG:1320,1320 NO_REX_SSE_REGS:1320,1320 SSE_REGS:1320,1320 MMX_REGS:2860,2860 INT_SSE_REGS:2860,2860 ALL_REGS:46640,46640 MEM:1210,1210
  a15(r106,l0) costs: AREG:220,220 DREG:220,220 CREG:220,220 BREG:220,220 SIREG:220,220 DIREG:-110,-110 AD_REGS:220,220 CLOBBERED_REGS:220,220 Q_REGS:220,220 NON_Q_REGS:220,220 TLS_GOTBASE_REGS:220,220 GENERAL_REGS:220,220 SSE_FIRST_REG:1320,1320 NO_REX_SSE_REGS:1320,1320 SSE_REGS:1320,1320 MMX_REGS:2860,2860 INT_SSE_REGS:2860,2860 ALL_REGS:46640,46640 MEM:1210,1210
  a16(r84,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 TLS_GOTBASE_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:19596,19596 NO_REX_SSE_REGS:19596,19596 SSE_REGS:19596,19596 MMX_REGS:40082,40082 INT_SSE_REGS:40082,40082 ALL_REGS:606856,606856 MEM:17122,17122
  a17(r85,l2) costs: AREG:1780,1780 DREG:-890,-890 CREG:1780,1780 BREG:1780,1780 SIREG:1780,1780 DIREG:1780,1780 AD_REGS:1780,1780 CLOBBERED_REGS:1780,1780 Q_REGS:1780,1780 NON_Q_REGS:1780,1780 TLS_GOTBASE_REGS:1780,1780 GENERAL_REGS:1780,1780 SSE_FIRST_REG:10092,10092 NO_REX_SSE_REGS:10092,10092 SSE_REGS:10092,10092 MMX_REGS:21074,21074 INT_SSE_REGS:21074,21074 ALL_REGS:272632,272632 MEM:10092,10092
  a18(r104,l2) costs: AREG:1780,1780 DREG:1780,1780 CREG:1780,1780 BREG:1780,1780 SIREG:1780,1780 DIREG:1780,1780 AD_REGS:1780,1780 CLOBBERED_REGS:1780,1780 Q_REGS:1780,1780 NON_Q_REGS:1780,1780 TLS_GOTBASE_REGS:1780,1780 GENERAL_REGS:1780,1780 SSE_FIRST_REG:5340,5340 NO_REX_SSE_REGS:5340,5340 SSE_REGS:5340,5340 MMX_REGS:11570,11570 INT_SSE_REGS:11570,11570 ALL_REGS:188680,188680 MEM:5340,5340
  a19(r105,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 TLS_GOTBASE_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:4752,4752 NO_REX_SSE_REGS:4752,4752 SSE_REGS:4752,4752 MMX_REGS:10296,10296 INT_SSE_REGS:10296,10296 ALL_REGS:167904,167904 MEM:4752,4752
  a20(r90,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 TLS_GOTBASE_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:21360,21360 NO_REX_SSE_REGS:21360,21360 SSE_REGS:21360,21360 MMX_REGS:43610,43610 INT_SSE_REGS:43610,43610 ALL_REGS:658600,658600 MEM:18690,18690
  a21(r91,l1) costs: AREG:1780,1780 DREG:3560,3560 CREG:3560,3560 BREG:3560,3560 SIREG:3560,3560 DIREG:3560,3560 AD_REGS:3560,3560 CLOBBERED_REGS:3560,3560 Q_REGS:3560,3560 NON_Q_REGS:3560,3560 TLS_GOTBASE_REGS:3560,3560 GENERAL_REGS:3560,3560 SSE_FIRST_REG:17800,17800 NO_REX_SSE_REGS:17800,17800 SSE_REGS:17800,17800 MMX_REGS:30260,30260 INT_SSE_REGS:30260,30260 ALL_REGS:468140,468140 MEM:12460,12460
  a22(r92,l1) costs: AREG:1780,1780 DREG:1780,1780 CREG:1780,1780 BREG:1780,1780 SIREG:1780,1780 DIREG:1780,1780 AD_REGS:1780,1780 CLOBBERED_REGS:1780,1780 Q_REGS:1780,1780 NON_Q_REGS:1780,1780 TLS_GOTBASE_REGS:1780,1780 GENERAL_REGS:1780,1780 SSE_FIRST_REG:12460,12460 NO_REX_SSE_REGS:12460,12460 SSE_REGS:12460,12460 MMX_REGS:24920,24920 INT_SSE_REGS:24920,24920 ALL_REGS:379140,379140 MEM:10680,10680
  a23(r105,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 TLS_GOTBASE_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:5340,5340 NO_REX_SSE_REGS:5340,5340 SSE_REGS:5340,5340 MMX_REGS:11570,11570 INT_SSE_REGS:11570,11570 ALL_REGS:188680,188680 MEM:5340,5340
  a24(r85,l1) costs: AREG:3560,3560 DREG:1780,1780 CREG:3560,3560 BREG:3560,3560 SIREG:3560,3560 DIREG:3560,3560 AD_REGS:3560,3560 CLOBBERED_REGS:3560,3560 Q_REGS:3560,3560 NON_Q_REGS:3560,3560 TLS_GOTBASE_REGS:3560,3560 GENERAL_REGS:3560,3560 SSE_FIRST_REG:12460,12460 NO_REX_SSE_REGS:12460,12460 SSE_REGS:12460,12460 MMX_REGS:24920,24920 INT_SSE_REGS:24920,24920 ALL_REGS:379140,379140 MEM:12460,12460
  a25(r89,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 TLS_GOTBASE_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:5340,5340 NO_REX_SSE_REGS:5340,5340 SSE_REGS:5340,5340 MMX_REGS:5340,5340 INT_SSE_REGS:5340,5340 ALL_REGS:89000,89000 MEM:890,890
  a26(r82,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 TLS_GOTBASE_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:10680,10680 NO_REX_SSE_REGS:10680,10680 SSE_REGS:10680,10680 MMX_REGS:16910,16910 INT_SSE_REGS:16910,16910 ALL_REGS:277680,277680 MEM:5340,5340
  a27(r97,l1) costs: AREG:1780,1780 DREG:3560,3560 CREG:3560,3560 BREG:3560,3560 SIREG:3560,3560 DIREG:3560,3560 AD_REGS:3560,3560 CLOBBERED_REGS:3560,3560 Q_REGS:3560,3560 NON_Q_REGS:3560,3560 TLS_GOTBASE_REGS:3560,3560 GENERAL_REGS:3560,3560 SSE_FIRST_REG:12460,12460 NO_REX_SSE_REGS:12460,12460 SSE_REGS:12460,12460 MMX_REGS:24920,24920 INT_SSE_REGS:24920,24920 ALL_REGS:379140,379140 MEM:11570,11570


Pass 1 for finding pseudo/allocno costs

    r109: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r107: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r106: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r105: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    a23 (r105,l1) best GENERAL_REGS, allocno GENERAL_REGS
    a19 (r105,l2) best GENERAL_REGS, allocno GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r97: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r96: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r95: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r94: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r91: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r85: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS

  a0(r109,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:660,660 NO_REX_SSE_REGS:660,660 SSE_REGS:660,660 MMX_REGS:1430,1430 INT_SSE_REGS:1430,1430 ALL_REGS:23320,23320 MEM:660,660
  a1(r104,l0) costs: GENERAL_REGS:0,1780 SSE_FIRST_REG:582,11262 NO_REX_SSE_REGS:582,11262 SSE_REGS:582,11262 MMX_REGS:1261,24401 INT_SSE_REGS:1261,12831 ALL_REGS:10670,199350 MEM:582,11262
  a2(r84,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:582,20178 NO_REX_SSE_REGS:582,20178 SSE_REGS:582,20178 MMX_REGS:1261,43719 INT_SSE_REGS:1261,43719 ALL_REGS:20564,632172 MEM:582,17704
  a3(r100,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:1164,1164 NO_REX_SSE_REGS:1164,1164 SSE_REGS:1164,1164 MMX_REGS:2522,2522 INT_SSE_REGS:2522,2522 ALL_REGS:41128,41128 MEM:970,970
  a4(r89,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:582,5922 NO_REX_SSE_REGS:582,5922 SSE_REGS:582,5922 MMX_REGS:1261,11941 INT_SSE_REGS:1261,11941 ALL_REGS:10670,105010 MEM:485,5825
  a5(r85,l0) costs: AREG:0,7120 DREG:0,890 CREG:0,7120 BREG:0,7120 SIREG:0,7120 DIREG:0,7120 AD_REGS:0,5340 CLOBBERED_REGS:0,5340 Q_REGS:0,5340 NON_Q_REGS:0,7120 TLS_GOTBASE_REGS:0,5340 GENERAL_REGS:0,5340 SSE_FIRST_REG:0,27892 NO_REX_SSE_REGS:0,27892 SSE_REGS:0,27892 MMX_REGS:0,58356 INT_SSE_REGS:0,46786 ALL_REGS:0,656524 MEM:0,27892
  a6(r105,l0) costs: AREG:440,440 DREG:440,440 CREG:440,440 BREG:440,440 SIREG:440,440 DIREG:440,220 AD_REGS:440,440 CLOBBERED_REGS:440,440 Q_REGS:440,440 NON_Q_REGS:440,440 TLS_GOTBASE_REGS:440,440 GENERAL_REGS:440,440 SSE_FIRST_REG:1540,11632 NO_REX_SSE_REGS:1540,11632 SSE_REGS:1540,11632 MMX_REGS:3080,24946 INT_SSE_REGS:3080,24946 ALL_REGS:46860,403444 MEM:1540,11632
  a7(r91,l0) costs: AREG:0,1780 DREG:0,3560 CREG:0,3560 BREG:0,3560 SIREG:0,3560 DIREG:0,3560 AD_REGS:0,3560 CLOBBERED_REGS:0,3560 Q_REGS:0,3560 NON_Q_REGS:0,3560 TLS_GOTBASE_REGS:0,3560 GENERAL_REGS:0,3560 SSE_FIRST_REG:1320,19120 NO_REX_SSE_REGS:1320,19120 SSE_REGS:1320,19120 MMX_REGS:2750,38350 INT_SSE_REGS:2750,38350 ALL_REGS:34980,508460 MEM:1320,18230
  a8(r90,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:660,22020 NO_REX_SSE_REGS:660,22020 SSE_REGS:660,22020 MMX_REGS:1320,47600 INT_SSE_REGS:1320,47600 ALL_REGS:11660,675600 MEM:660,19350
  a9(r96,l0) costs: AREG:880,880 DREG:880,880 CREG:880,440 BREG:880,880 SIREG:880,880 DIREG:880,880 AD_REGS:880,880 CLOBBERED_REGS:880,880 Q_REGS:880,880 NON_Q_REGS:880,880 TLS_GOTBASE_REGS:880,880 GENERAL_REGS:880,880 SSE_FIRST_REG:2420,2420 NO_REX_SSE_REGS:2420,2420 SSE_REGS:2420,2420 MMX_REGS:4620,4620 INT_SSE_REGS:4620,4620 ALL_REGS:58740,58740 MEM:2420,2420
  a10(r94,l0) costs: AREG:440,440 DREG:440,440 CREG:440,440 BREG:440,440 SIREG:440,440 DIREG:440,220 AD_REGS:440,440 CLOBBERED_REGS:440,440 Q_REGS:440,440 NON_Q_REGS:440,440 TLS_GOTBASE_REGS:440,440 GENERAL_REGS:440,440 SSE_FIRST_REG:880,880 NO_REX_SSE_REGS:880,880 SSE_REGS:880,880 MMX_REGS:1650,1650 INT_SSE_REGS:1650,1650 ALL_REGS:23540,23540 MEM:880,880
  a11(r95,l0) costs: AREG:440,220 DREG:440,440 CREG:440,440 BREG:440,440 SIREG:440,440 DIREG:440,440 AD_REGS:440,440 CLOBBERED_REGS:440,440 Q_REGS:440,440 NON_Q_REGS:440,440 TLS_GOTBASE_REGS:440,440 GENERAL_REGS:440,440 SSE_FIRST_REG:1540,1540 NO_REX_SSE_REGS:1540,1540 SSE_REGS:1540,1540 MMX_REGS:2970,2970 INT_SSE_REGS:2970,2970 ALL_REGS:35200,35200 MEM:1540,1540
  a12(r108,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:660,660 NO_REX_SSE_REGS:660,660 SSE_REGS:660,660 MMX_REGS:1430,1430 INT_SSE_REGS:1430,1430 ALL_REGS:23320,23320 MEM:660,660
  a13(r92,l0) costs: GENERAL_REGS:0,1780 SSE_FIRST_REG:660,13120 NO_REX_SSE_REGS:660,13120 SSE_REGS:660,13120 MMX_REGS:1320,26240 INT_SSE_REGS:1320,26240 ALL_REGS:11660,390800 MEM:660,11340
  a14(r107,l0) costs: AREG:440,440 DREG:440,440 CREG:440,440 BREG:440,440 SIREG:220,-110 DIREG:440,440 AD_REGS:440,440 CLOBBERED_REGS:220,220 Q_REGS:440,440 NON_Q_REGS:220,220 TLS_GOTBASE_REGS:220,220 GENERAL_REGS:220,220 SSE_FIRST_REG:1980,1980 NO_REX_SSE_REGS:1980,1980 SSE_REGS:1980,1980 MMX_REGS:4290,4290 INT_SSE_REGS:2860,2860 ALL_REGS:46640,46640 MEM:1870,1870
  a15(r106,l0) costs: AREG:440,440 DREG:440,440 CREG:440,440 BREG:440,440 SIREG:440,440 DIREG:220,-110 AD_REGS:440,440 CLOBBERED_REGS:220,220 Q_REGS:440,440 NON_Q_REGS:220,220 TLS_GOTBASE_REGS:220,220 GENERAL_REGS:220,220 SSE_FIRST_REG:1980,1980 NO_REX_SSE_REGS:1980,1980 SSE_REGS:1980,1980 MMX_REGS:4290,4290 INT_SSE_REGS:2860,2860 ALL_REGS:46640,46640 MEM:1870,1870
  a16(r84,l2) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:19596,19596 NO_REX_SSE_REGS:19596,19596 SSE_REGS:19596,19596 MMX_REGS:42458,42458 INT_SSE_REGS:42458,42458 ALL_REGS:611608,611608 MEM:17122,17122
  a17(r85,l2) costs: AREG:3560,3560 DREG:1780,-890 CREG:3560,3560 BREG:3560,3560 SIREG:3560,3560 DIREG:3560,3560 AD_REGS:1780,1780 CLOBBERED_REGS:1780,1780 Q_REGS:1780,1780 NON_Q_REGS:3560,3560 TLS_GOTBASE_REGS:1780,1780 GENERAL_REGS:1780,1780 SSE_FIRST_REG:15432,15432 NO_REX_SSE_REGS:15432,15432 SSE_REGS:15432,15432 MMX_REGS:33436,33436 INT_SSE_REGS:21866,21866 ALL_REGS:277384,277384 MEM:15432,15432
  a18(r104,l2) costs: GENERAL_REGS:1780,1780 SSE_FIRST_REG:10680,10680 NO_REX_SSE_REGS:10680,10680 SSE_REGS:10680,10680 MMX_REGS:23140,23140 INT_SSE_REGS:11570,11570 ALL_REGS:188680,188680 MEM:10680,10680
  a19(r105,l2) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 TLS_GOTBASE_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:4752,4752 NO_REX_SSE_REGS:4752,4752 SSE_REGS:4752,4752 MMX_REGS:10296,10296 INT_SSE_REGS:10296,10296 ALL_REGS:167904,167904 MEM:4752,4752
  a20(r90,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:21360,21360 NO_REX_SSE_REGS:21360,21360 SSE_REGS:21360,21360 MMX_REGS:46280,46280 INT_SSE_REGS:46280,46280 ALL_REGS:663940,663940 MEM:18690,18690
  a21(r91,l1) costs: AREG:3560,1780 DREG:3560,3560 CREG:3560,3560 BREG:3560,3560 SIREG:3560,3560 DIREG:3560,3560 AD_REGS:3560,3560 CLOBBERED_REGS:3560,3560 Q_REGS:3560,3560 NON_Q_REGS:3560,3560 TLS_GOTBASE_REGS:3560,3560 GENERAL_REGS:3560,3560 SSE_FIRST_REG:17800,17800 NO_REX_SSE_REGS:17800,17800 SSE_REGS:17800,17800 MMX_REGS:35600,35600 INT_SSE_REGS:35600,35600 ALL_REGS:473480,473480 MEM:16910,16910
  a22(r92,l1) costs: GENERAL_REGS:1780,1780 SSE_FIRST_REG:12460,12460 NO_REX_SSE_REGS:12460,12460 SSE_REGS:12460,12460 MMX_REGS:24920,24920 INT_SSE_REGS:24920,24920 ALL_REGS:379140,379140 MEM:10680,10680
  a23(r105,l1) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 TLS_GOTBASE_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:5340,5340 NO_REX_SSE_REGS:5340,5340 SSE_REGS:5340,5340 MMX_REGS:11570,11570 INT_SSE_REGS:11570,11570 ALL_REGS:188680,188680 MEM:5340,5340
  a24(r85,l1) costs: AREG:3560,3560 DREG:3560,1780 CREG:3560,3560 BREG:3560,3560 SIREG:3560,3560 DIREG:3560,3560 AD_REGS:3560,3560 CLOBBERED_REGS:3560,3560 Q_REGS:3560,3560 NON_Q_REGS:3560,3560 TLS_GOTBASE_REGS:3560,3560 GENERAL_REGS:3560,3560 SSE_FIRST_REG:12460,12460 NO_REX_SSE_REGS:12460,12460 SSE_REGS:12460,12460 MMX_REGS:24920,24920 INT_SSE_REGS:24920,24920 ALL_REGS:379140,379140 MEM:12460,12460
  a25(r89,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:5340,5340 NO_REX_SSE_REGS:5340,5340 SSE_REGS:5340,5340 MMX_REGS:10680,10680 INT_SSE_REGS:10680,10680 ALL_REGS:94340,94340 MEM:5340,5340
  a26(r82,l1) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:10680,10680 NO_REX_SSE_REGS:10680,10680 SSE_REGS:10680,10680 MMX_REGS:22250,22250 INT_SSE_REGS:22250,22250 ALL_REGS:283020,283020 MEM:9790,9790
  a27(r97,l1) costs: AREG:3560,1780 DREG:3560,3560 CREG:3560,3560 BREG:3560,3560 SIREG:3560,3560 DIREG:3560,3560 AD_REGS:3560,3560 CLOBBERED_REGS:3560,3560 Q_REGS:3560,3560 NON_Q_REGS:3560,3560 TLS_GOTBASE_REGS:3560,3560 GENERAL_REGS:3560,3560 SSE_FIRST_REG:12460,12460 NO_REX_SSE_REGS:12460,12460 SSE_REGS:12460,12460 MMX_REGS:24920,24920 INT_SSE_REGS:24920,24920 ALL_REGS:379140,379140 MEM:11570,11570

   Insn 61(l0): point = 1
   Insn 60(l0): point = 4
   Insn 59(l0): point = 6
   Insn 84(l0): point = 9
   Insn 74(l0): point = 11
   Insn 35(l0): point = 13
   Insn 34(l0): point = 15
   Insn 15(l0): point = 18
   Insn 14(l0): point = 20
   Insn 7(l0): point = 22
   Insn 13(l0): point = 24
   Insn 86(l0): point = 26
   Insn 12(l0): point = 28
   Insn 10(l0): point = 30
   Insn 6(l0): point = 32
   Insn 3(l0): point = 34
   Insn 83(l0): point = 36
   Insn 2(l0): point = 38
   Insn 82(l0): point = 40
   Insn 41(l2): point = 43
   Insn 40(l2): point = 45
   Insn 52(l2): point = 48
   Insn 51(l2): point = 50
   Insn 49(l2): point = 52
   Insn 48(l2): point = 54
   Insn 47(l2): point = 56
   Insn 46(l2): point = 58
   Insn 44(l2): point = 60
   Insn 32(l1): point = 63
   Insn 31(l1): point = 65
   Insn 30(l1): point = 67
   Insn 29(l1): point = 69
   Insn 28(l1): point = 71
   Insn 27(l1): point = 73
   Insn 25(l1): point = 75
   Insn 21(l1): point = 78
 a0(r109): [6..6]
 a1(r104): [9..11]
 a2(r84): [9..13]
 a3(r100): [14..15]
 a4(r89): [16..17]
 a5(r85): [9..17]
 a6(r105): [9..30]
 a7(r91): [18..38]
 a8(r90): [18..22]
 a9(r96): [24..28]
 a10(r94): [24..24]
 a11(r95): [25..26]
 a12(r108): [32..32]
 a13(r92): [18..34]
 a14(r107): [35..36]
 a15(r106): [39..40]
 a16(r84): [43..62]
 a17(r85): [61..62] [43..45]
 a18(r104): [43..62]
 a19(r105): [43..62]
 a20(r90): [63..80]
 a21(r91): [72..80] [63..69]
 a22(r92): [63..80]
 a23(r105): [63..80]
 a24(r85): [63..76]
 a25(r89): [63..78]
 a26(r82): [66..71]
 a27(r97): [70..75]
      Moving ranges of a23r105 to a6r105:  [63..80]
      Moving ranges of a19r105 to a6r105:  [43..62]
      Moving ranges of a18r104 to a1r104:  [43..62]
 Rebuilding regno allocno list for 97
      Moving ranges of a22r92 to a13r92:  [63..80]
      Moving ranges of a21r91 to a7r91:  [72..80] [63..69]
      Moving ranges of a20r90 to a8r90:  [63..80]
      Moving ranges of a25r89 to a4r89:  [63..78]
      Moving ranges of a24r85 to a5r85:  [63..76]
      Moving ranges of a17r85 to a5r85:  [61..62] [43..45]
      Moving ranges of a16r84 to a2r84:  [43..62]
 Rebuilding regno allocno list for 82
Compressing live ranges: from 81 to 28 - 34%
Ranges after the compression:
 a0(r109): [0..0]
 a1(r104): [18..21] [1..2]
 a2(r84): [18..21] [1..2]
 a3(r100): [3..4]
 a4(r89): [22..27] [5..6]
 a5(r85): [18..27] [1..6]
 a6(r105): [18..27] [1..11]
 a7(r91): [26..27] [22..23] [7..15]
 a8(r90): [22..27] [7..8]
 a9(r96): [9..11]
 a10(r94): [9..9]
 a11(r95): [10..11]
 a12(r108): [12..12]
 a13(r92): [22..27] [7..13]
 a14(r107): [14..15]
 a15(r106): [16..17]
 a26(r82): [22..25]
 a27(r97): [24..27]
+++Allocating 136 bytes for conflict table (uncompressed size 224)
;; a0(r109,l0) conflicts:
;;     total conflict hard regs:
;;     conflict hard regs:

;; a1(r104,l0) conflicts: a2(r84,l0) a5(r85,l0) a6(r105,l0)
;;     total conflict hard regs: 0-1 5
;;     conflict hard regs: 0-1 5

;; a2(r84,l0) conflicts: a1(r104,l0) a5(r85,l0) a6(r105,l0)
;;     total conflict hard regs: 0-1 4-5
;;     conflict hard regs: 0-1 4-5

;; a3(r100,l0) conflicts: a5(r85,l0) a6(r105,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a4(r89,l0) conflicts: a5(r85,l0) a6(r105,l0) a7(r91,l0) a8(r90,l0) a13(r92,l0) a26(r82,l0) a27(r97,l0)
;;     total conflict hard regs: 0-1
;;     conflict hard regs: 0-1

;; a5(r85,l0) conflicts: a1(r104,l0) a2(r84,l0) a6(r105,l0) a3(r100,l0) a4(r89,l0) a7(r91,l0) a8(r90,l0) a13(r92,l0) a26(r82,l0) a27(r97,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

;; a6(r105,l0) conflicts: a1(r104,l0) a2(r84,l0) a5(r85,l0) a3(r100,l0) a4(r89,l0) a7(r91,l0) a8(r90,l0) a13(r92,l0) a10(r94,l0) a9(r96,l0) a11(r95,l0) a26(r82,l0) a27(r97,l0)
;;     total conflict hard regs: 0-2 4-5
;;     conflict hard regs: 0-2 4-5

;; a7(r91,l0) conflicts: a5(r85,l0) a6(r105,l0) a4(r89,l0) a8(r90,l0) a13(r92,l0) a10(r94,l0) a9(r96,l0) a11(r95,l0) a12(r108,l0) a14(r107,l0) a26(r82,l0) a27(r97,l0)
;;     total conflict hard regs: 0-2 4-5
;;     conflict hard regs: 0-2 4-5

;; a8(r90,l0) conflicts: a5(r85,l0) a6(r105,l0) a4(r89,l0) a7(r91,l0) a13(r92,l0) a26(r82,l0) a27(r97,l0)
;;     total conflict hard regs: 0-1
;;     conflict hard regs: 0-1

;; a9(r96,l0) conflicts: a6(r105,l0) a7(r91,l0) a13(r92,l0) a10(r94,l0) a11(r95,l0)
;;     total conflict hard regs: 0 5
;;     conflict hard regs: 0 5

;; a10(r94,l0) conflicts: a6(r105,l0) a7(r91,l0) a13(r92,l0) a9(r96,l0)
;;     total conflict hard regs: 2
;;     conflict hard regs: 2

;; a11(r95,l0) conflicts: a6(r105,l0) a7(r91,l0) a13(r92,l0) a9(r96,l0)
;;     total conflict hard regs: 2 5
;;     conflict hard regs: 2 5

;; a12(r108,l0) conflicts: a7(r91,l0) a13(r92,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a13(r92,l0) conflicts: a5(r85,l0) a6(r105,l0) a4(r89,l0) a7(r91,l0) a8(r90,l0) a10(r94,l0) a9(r96,l0) a11(r95,l0) a12(r108,l0) a26(r82,l0) a27(r97,l0)
;;     total conflict hard regs: 0-2 5
;;     conflict hard regs: 0-2 5

;; a14(r107,l0) conflicts: a7(r91,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a15(r106,l0) conflicts:
;;     total conflict hard regs: 4
;;     conflict hard regs: 4

;; a26(r82,l0) conflicts: a5(r85,l0) a6(r105,l0) a4(r89,l0) a7(r91,l0) a8(r90,l0) a13(r92,l0) a27(r97,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a27(r97,l0) conflicts: a5(r85,l0) a6(r105,l0) a4(r89,l0) a7(r91,l0) a8(r90,l0) a13(r92,l0) a26(r82,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1


  cp0:a3(r100)<->a4(r89)@12:shuffle
  cp1:a2(r84)<->a3(r100)@12:shuffle
  cp2:a7(r91)<->a15(r106)@110:move
  cp3:a13(r92)<->a14(r107)@110:move
  pref0:a14(r107)<-hr4@165
  pref1:a15(r106)<-hr5@165
  pref2:a6(r105)<-hr5@110
  pref3:a27(r97)<-hr0@890
  pref4:a9(r96)<-hr2@220
  pref5:a11(r95)<-hr0@110
  pref6:a10(r94)<-hr5@110
  regions=3, blocks=10, points=28
    allocnos=28 (big 0), copies=4, conflicts=0, ranges=27

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 9 8 7 6 5 4 3 2
    all: 0r109 1r104 2r84 3r100 4r89 5r85 6r105 7r91 8r90 9r96 10r94 11r95 12r108 13r92 14r107 15r106 26r82 27r97
    modified regnos: 82 84 85 89 90 91 92 94 95 96 97 100 104 105 106 107 108 109
    border:
    Pressure: GENERAL_REGS=7
 Removing pref2:hr5@110
    Hard reg set forest:
      0:( 0-6 8-15 20-51)@0
        1:( 0-6 36-43)@28120
          2:( 1-6 36-43)@54004
            3:( 2-6 36-43)@60140
              4:( 2-4 6 36-43)@3960
                5:( 2-3 6 36-43)@45308
                  6:( 3 6 36-43)@129804
                    7:( 3 6 40-43)@18964
      Allocno a0r109 of GENERAL_REGS(15) has 15 avail. regs  0-6 36-43, node:  0-6 36-43 (confl regs =  7-35 44-75)
      Allocno a1r104 of GENERAL_REGS(15) has 6 avail. regs  3 6 40-43, node:  3 6 40-43 (confl regs =  0-1 5 7-35 44-75)
      Allocno a2r84 of GENERAL_REGS(15) has 11 avail. regs  2-3 6 36-43, node:  2-3 6 36-43 (confl regs =  0-1 4-5 7-35 44-75)
      Allocno a3r100 of GENERAL_REGS(15) has 15 avail. regs  0-6 36-43, node:  0-6 36-43 (confl regs =  7-35 44-75)
      Allocno a4r89 of GENERAL_REGS(15) has 13 avail. regs  2-6 36-43, node:  2-6 36-43 (confl regs =  0-1 7-35 44-75)
      Allocno a5r85 of GENERAL_REGS(15) has 14 avail. regs  1-6 36-43, node:  1-6 36-43 (confl regs =  0 7-35 44-75)
      Allocno a6r105 of GENERAL_REGS(15) has 10 avail. regs  3 6 36-43, node:  3 6 36-43 (confl regs =  0-2 4-5 7-35 44-75)
      Allocno a7r91 of GENERAL_REGS(15) has 10 avail. regs  3 6 36-43, node:  3 6 36-43 (confl regs =  0-2 4-5 7-35 44-75)
      Allocno a8r90 of GENERAL_REGS(15) has 13 avail. regs  2-6 36-43, node:  2-6 36-43 (confl regs =  0-1 7-35 44-75)
      Allocno a9r96 of GENERAL_REGS(15) has 13 avail. regs  1-4 6 36-43, ^node:  1-6 36-43 (confl regs =  0 5 7-35 44-75)
      Allocno a10r94 of GENERAL_REGS(15) has 14 avail. regs  0-1 3-6 36-43, ^node:  0-6 36-43 (confl regs =  2 7-35 44-75)
      Allocno a11r95 of GENERAL_REGS(15) has 13 avail. regs  0-1 3-4 6 36-43, ^node:  0-6 36-43 (confl regs =  2 5 7-35 44-75)
      Allocno a12r108 of GENERAL_REGS(15) has 15 avail. regs  0-6 36-43, node:  0-6 36-43 (confl regs =  7-35 44-75)
      Allocno a13r92 of GENERAL_REGS(15) has 11 avail. regs  3-4 6 36-43, ^node:  2-4 6 36-43 (confl regs =  0-2 5 7-35 44-75)
      Allocno a14r107 of GENERAL_REGS(15) has 15 avail. regs  0-6 36-43, node:  0-6 36-43 (confl regs =  7-35 44-75)
      Allocno a15r106 of GENERAL_REGS(15) has 14 avail. regs  0-3 5-6 36-43, ^node:  0-6 36-43 (confl regs =  4 7-35 44-75)
      Allocno a26r82 of GENERAL_REGS(15) has 15 avail. regs  0-6 36-43, node:  0-6 36-43 (confl regs =  7-35 44-75)
      Allocno a27r97 of GENERAL_REGS(15) has 14 avail. regs  0 2-6 36-43, ^node:  0-6 36-43 (confl regs =  1 7-35 44-75)
      Forming thread from colorable bucket:
        Forming thread by copy 0:a3r100-a4r89 (freq=12):
          Result (freq=1181): a3r100(194) a4r89(987)
        Forming thread by copy 1:a2r84-a3r100 (freq=12):
          Result (freq=4544): a2r84(3363) a3r100(194) a4r89(987)
      Pushing a12(r108,l0)(cost 0)
      Forming thread from allocno a13r92:
        Forming thread by copy 3:a13r92-a14r107 (freq=110):
          Result (freq=3000): a13r92(2780) a14r107(220)
        Making a13(r92,l0) colorable
      Pushing a10(r94,l0)(cost 0)
      Pushing a0(r109,l0)(cost 0)
      Pushing a15(r106,l0)(cost 0)
      Pushing a14(r107,l0)(cost 0)
      Forming thread from allocno a7r91:
        Forming thread by copy 2:a7r91-a15r106 (freq=110):
          Result (freq=4000): a7r91(3780) a15r106(220)
        Making a7(r91,l0) colorable
      Pushing a11(r95,l0)(cost 0)
      Pushing a9(r96,l0)(cost 0)
      Pushing a1(r104,l0)(cost 0)
      Forming thread from allocno a6r105:
        Making a6(r105,l0) colorable
      Pushing a27(r97,l0)(cost 0)
      Pushing a26(r82,l0)(cost 0)
      Pushing a6(r105,l0)(cost 11192)
      Pushing a13(r92,l0)(cost 9560)
      Pushing a5(r85,l0)(cost 0)
      Pushing a8(r90,l0)(cost 0)
      Pushing a7(r91,l0)(cost 16450)
      Pushing a3(r100,l0)(cost 0)
      Pushing a4(r89,l0)(cost 0)
      Pushing a2(r84,l0)(cost 0)
      Popping a2(r84,l0)  --         assign reg 3
      Popping a4(r89,l0)  --         assign reg 3
      Popping a3(r100,l0)  --         assign reg 3
      Popping a7(r91,l0)  --         assign reg 36
      Popping a8(r90,l0)  --         assign reg 2
      Popping a5(r85,l0)  --         assign reg 1
      Popping a13(r92,l0)  --         assign reg 4
      Popping a6(r105,l0)  --         assign reg 6
      Popping a26(r82,l0)  --         assign reg 5
      Popping a27(r97,l0)  --         assign reg 0
      Popping a1(r104,l0)  --         assign reg 40
      Popping a9(r96,l0)  --         assign reg 2
      Popping a11(r95,l0)  --         assign reg 0
      Popping a14(r107,l0)  --         assign reg 4
      Popping a15(r106,l0)  --         assign reg 5
      Popping a0(r109,l0)  --         assign reg 0
      Popping a10(r94,l0)  --         assign reg 5
      Popping a12(r108,l0)  --         assign reg 0
Disposition:
   26:r82  l0     5    2:r84  l0     3    5:r85  l0     1    4:r89  l0     3
    8:r90  l0     2    7:r91  l0    36   13:r92  l0     4   10:r94  l0     5
   11:r95  l0     0    9:r96  l0     2   27:r97  l0     0    3:r100 l0     3
    1:r104 l0    40    6:r105 l0     6   15:r106 l0     5   14:r107 l0     4
   12:r108 l0     0    0:r109 l0     0
New iteration of spill/restore move
+++Costs: overall 10890, reg 10890, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


print_conv

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 4 [si] 5 [di] 7 [sp] 17 [flags]
;;  ref usage 	r0={4d,1u} r1={4d,1u} r2={3d} r4={4d,2u} r5={4d,2u} r6={1d,9u} r7={1d,11u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r16={1d,8u} r17={12d,4u} r18={2d} r19={1d,12u,1e} r20={3d} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={3d} r37={3d} r38={2d} r39={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r82={1d,1u} r84={2d,3u} r85={2d,2u} r89={1d,1u} r90={2d,3u} r91={2d,4u} r92={1d,3u} r94={1d} r95={1d,1u} r96={2d,2u} r97={1d,1u} r100={1d,1u} r104={1d,1u} r105={1d,4u} r106={1d,1u} r107={1d,1u} r108={1d} r109={1d} 
;;    total ref usage 270{190d,79u,1e} in 36{34 regular + 2 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
(note 8 1 82 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 82 8 2 2 (set (reg:SI 106)
        (reg:SI 5 di [ x ])) "ns.c":20:1 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 5 di [ x ])
        (nil)))
(insn 2 82 83 2 (set (reg/v:SI 91 [ x ])
        (reg:SI 106)) "ns.c":20:1 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 106)
        (nil)))
(insn 83 2 3 2 (set (reg:SI 107)
        (reg:SI 4 si [ y ])) "ns.c":20:1 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 4 si [ y ])
        (nil)))
(insn 3 83 4 2 (set (reg/v:SI 92 [ y ])
        (reg:SI 107)) "ns.c":20:1 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 107)
        (nil)))
(note 4 3 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 4 10 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 19 frame)
                        (const_int -8 [0xfffffffffffffff8])) [2 D.3260+0 S8 A64])
                (unspec:DI [
                        (mem/v/f:DI (const_int 40 [0x28]) [3 MEM[(<address-space-1> long unsigned int *)40B]+0 S8 A64 AS1])
                    ] UNSPEC_SP_SET))
            (set (reg:DI 108)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) "ns.c":20:1 1159 {stack_protect_set_1_di}
     (expr_list:REG_UNUSED (reg:DI 108)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 10 6 12 2 (parallel [
            (set (reg/f:DI 105)
                (plus:DI (reg/f:DI 19 frame)
                    (const_int -144 [0xffffffffffffff70])))
            (clobber (reg:CC 17 flags))
        ]) "ns.c":21:15 210 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUIV (plus:DI (reg/f:DI 19 frame)
                (const_int -144 [0xffffffffffffff70]))
            (nil))))
(insn 12 10 86 2 (set (reg:DI 96)
        (const_int 16 [0x10])) "ns.c":21:15 74 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int 16 [0x10])
        (nil)))
(insn 86 12 13 2 (set (reg:DI 95)
        (const_int 0 [0])) "ns.c":21:15 74 {*movdi_internal}
     (expr_list:REG_EQUIV (const_int 0 [0])
        (nil)))
(insn 13 86 7 2 (parallel [
            (set (reg:DI 96)
                (const_int 0 [0]))
            (set (reg/f:DI 94)
                (plus:DI (ashift:DI (reg:DI 96)
                        (const_int 3 [0x3]))
                    (reg/f:DI 105)))
            (set (mem/c:BLK (reg/f:DI 105) [1 num+0 S128 A128])
                (const_int 0 [0]))
            (use (reg:DI 95))
            (use (reg:DI 96))
        ]) "ns.c":21:15 1080 {*rep_stosdi_rex64}
     (expr_list:REG_DEAD (reg:DI 95)
        (expr_list:REG_UNUSED (reg:DI 96)
            (expr_list:REG_UNUSED (reg/f:DI 94)
                (nil)))))
(insn 7 13 14 2 (set (reg:DI 90 [ ivtmp.30 ])
        (const_int 0 [0])) "ns.c":23:9 74 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(insn 14 7 15 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 91 [ x ])
            (const_int 0 [0]))) "ns.c":23:9 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 15 14 19 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 57)
            (pc))) "ns.c":23:9 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 118111604 (nil)))
 -> 57)
(code_label 19 15 20 3 2 (nil) [1 uses])
(note 20 19 21 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 3 (set (reg/v:SI 89 [ k ])
        (subreg:SI (reg:DI 90 [ ivtmp.30 ]) 0)) 75 {*movsi_internal}
     (nil))
(note 22 21 25 3 NOTE_INSN_DELETED)
(insn 25 22 27 3 (parallel [
            (set (reg:SI 97)
                (udiv:SI (reg/v:SI 91 [ x ])
                    (reg/v:SI 92 [ y ])))
            (set (reg:SI 85 [ prephitmp_6 ])
                (umod:SI (reg/v:SI 91 [ x ])
                    (reg/v:SI 92 [ y ])))
            (clobber (reg:CC 17 flags))
        ]) "ns.c":25:14 449 {*udivmodsi4}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 27 25 28 3 (set (mem:SI (plus:DI (mult:DI (reg:DI 90 [ ivtmp.30 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 105)) [1 MEM[(unsigned int *)&num + ivtmp.30_29 * 4]+0 S4 A32])
        (reg:SI 85 [ prephitmp_6 ])) "ns.c":25:10 75 {*movsi_internal}
     (nil))
(insn 28 27 29 3 (set (reg/v:SI 82 [ x ])
        (reg/v:SI 91 [ x ])) 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg/v:SI 91 [ x ])
        (nil)))
(insn 29 28 30 3 (set (reg/v:SI 91 [ x ])
        (reg:SI 97)) "ns.c":26:5 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 97)
        (nil)))
(insn 30 29 31 3 (parallel [
            (set (reg:DI 90 [ ivtmp.30 ])
                (plus:DI (reg:DI 90 [ ivtmp.30 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "ns.c":23:9 210 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 31 30 32 3 (set (reg:CC 17 flags)
        (compare:CC (reg/v:SI 92 [ y ])
            (reg/v:SI 82 [ x ]))) "ns.c":23:9 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg/v:SI 82 [ x ])
        (nil)))
(jump_insn 32 31 33 3 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 19)
            (pc))) "ns.c":23:9 806 {*jcc}
     (expr_list:REG_DEAD (reg:CC 17 flags)
        (int_list:REG_BR_PROB 955630228 (nil)))
 -> 19)
(note 33 32 34 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 34 33 35 4 (parallel [
            (set (reg:SI 100)
                (plus:SI (reg/v:SI 89 [ k ])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) 209 {*addsi_1}
     (expr_list:REG_DEAD (reg/v:SI 89 [ k ])
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 35 34 74 4 (set (reg:DI 84 [ ivtmp.15 ])
        (sign_extend:DI (reg:SI 100))) 147 {*extendsidi2_rex64}
     (expr_list:REG_DEAD (reg:SI 100)
        (nil)))
(insn 74 35 84 4 (set (reg/f:DI 104)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7fd1afc415a0 *.LC0>)) 74 {*movdi_internal}
     (expr_list:REG_EQUIV (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7fd1afc415a0 *.LC0>)
        (nil)))
(jump_insn 84 74 85 4 (set (pc)
        (label_ref 42)) 807 {jump}
     (nil)
 -> 42)
(barrier 85 84 50)
(code_label 50 85 38 5 4 (nil) [1 uses])
(note 38 50 40 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 40 38 41 5 (set (reg:SI 85 [ prephitmp_6 ])
        (mem:SI (plus:DI (mult:DI (reg:DI 84 [ ivtmp.15 ])
                    (const_int 4 [0x4]))
                (reg/f:DI 105)) [1 MEM[(unsigned int *)&num + ivtmp.15_5 * 4]+0 S4 A32])) "ns.c":31:3 75 {*movsi_internal}
     (nil))
(insn 41 40 42 5 (parallel [
            (set (reg:DI 84 [ ivtmp.15 ])
                (plus:DI (reg:DI 84 [ ivtmp.15 ])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) 210 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(code_label 42 41 43 6 3 (nil) [1 uses])
(note 43 42 44 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 46 6 (set (reg:SI 1 dx)
        (reg:SI 85 [ prephitmp_6 ])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":112:10 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 85 [ prephitmp_6 ])
        (nil)))
(insn 46 44 47 6 (set (reg:DI 4 si)
        (reg/f:DI 104)) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":112:10 74 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7fd1afc415a0 *.LC0>)
        (nil)))
(insn 47 46 48 6 (set (reg:SI 5 di)
        (const_int 1 [0x1])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":112:10 75 {*movsi_internal}
     (nil))
(insn 48 47 49 6 (set (reg:QI 0 ax)
        (const_int 0 [0])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":112:10 77 {*movqi_internal}
     (nil))
(call_insn 49 48 51 6 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x7fd1aff14c00 __printf_chk>) [0 __builtin___printf_chk S1 A8])
            (const_int 0 [0]))) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":112:10 824 {*call_value}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:SI 1 dx)
                (expr_list:REG_UNUSED (reg:SI 0 ax)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x7fd1aff14c00 __printf_chk>)
                        (nil))))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:SI (use (reg:SI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 51 49 52 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (subreg:SI (reg:DI 84 [ ivtmp.15 ]) 0)
            (const_int -1 [0xffffffffffffffff]))) "ns.c":30:10 11 {*cmpsi_1}
     (nil))
(jump_insn 52 51 57 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 50)
            (pc))) "ns.c":30:10 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 955630228 (nil)))
 -> 50)
(code_label 57 52 64 7 1 (nil) [1 uses])
(note 64 57 59 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 59 64 60 7 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -8 [0xfffffffffffffff8])) [2 D.3260+0 S8 A64])
                        (mem/v/f:DI (const_int 40 [0x28]) [3 MEM[(<address-space-1> long unsigned int *)40B]+0 S8 A64 AS1])
                    ] UNSPEC_SP_TEST))
            (clobber (reg:DI 109))
        ]) "ns.c":32:1 1164 {stack_protect_test_1_di}
     (expr_list:REG_UNUSED (reg:DI 109)
        (nil)))
(jump_insn 60 59 67 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 63)
            (pc))) "ns.c":32:1 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1073312332 (nil)))
 -> 63)
(note 67 60 61 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(call_insn 61 67 62 8 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7fd1afc2e900 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) "ns.c":32:1 813 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7fd1afc2e900 __stack_chk_fail>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (nil))
(barrier 62 61 63)
(code_label 63 62 68 9 6 (nil) [1 uses])
(note 68 63 0 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

;; Function main (main, funcdef_no=39, decl_uid=3196, cgraph_uid=40, symbol_order=39) (executed once)

Starting decreasing number of live ranges...
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6
;; 2 succs { 4 3 }
;; 3 succs { }
;; 4 succs { 6 5 }
;; 5 succs { }
;; 6 succs { 1 }
rescanning insn with uid = 32.
deleting insn with uid = 30.
rescanning insn with uid = 33.
deleting insn with uid = 31.
Removing SCRATCH to p98 in insn #4 (nop 2)
rescanning insn with uid = 4.
Removing SCRATCH to p99 in insn #40 (nop 3)
rescanning insn with uid = 40.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 7 n_edges 6 count 7 (    1)
Reg 89 uninteresting
Reg 97 uninteresting
Reg 90 uninteresting
Reg 91 uninteresting
Reg 92 uninteresting
;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6
;; 2 succs { 4 3 }
;; 3 succs { }
;; 4 succs { 6 5 }
;; 5 succs { }
;; 6 succs { 1 }
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
init_insns for 89: (insn_list:REG_DEP_TRUE 11 (nil))
init_insns for 90: (insn_list:REG_DEP_TRUE 19 (nil))
init_insns for 91: (insn_list:REG_DEP_TRUE 22 (nil))
init_insns for 92: (insn_list:REG_DEP_TRUE 24 (nil))
Reg 87 had equivalence, but can't be eliminated
Reg 88 had equivalence, but can't be eliminated

Pass 0 for finding pseudo/allocno costs

    a0 (r99,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a8 (r98,l0) best GENERAL_REGS, allocno GENERAL_REGS
    a4 (r97,l0) best AREG, allocno AREG
    a1 (r92,l0) best DIREG, allocno DIREG
    a2 (r91,l0) best SIREG, allocno SIREG
    a3 (r90,l0) best CREG, allocno CREG
    a5 (r89,l0) best DIREG, allocno DIREG
    a6 (r88,l0) best SIREG, allocno SIREG
    a7 (r87,l0) best DREG, allocno DREG

  a0(r99,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 TLS_GOTBASE_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:5994,5994 NO_REX_SSE_REGS:5994,5994 SSE_REGS:5994,5994 MMX_REGS:12987,12987 INT_SSE_REGS:12987,12987 ALL_REGS:211788,211788 MEM:5994,5994
  a1(r92,l0) costs: AREG:2,2 DREG:2,2 CREG:2,2 BREG:2,2 SIREG:2,2 DIREG:-1,-1 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 TLS_GOTBASE_REGS:2,2 GENERAL_REGS:2,2 SSE_FIRST_REG:12,12 NO_REX_SSE_REGS:12,12 SSE_REGS:12,12 MMX_REGS:23,23 INT_SSE_REGS:23,23 ALL_REGS:316,316 MEM:11,11
  a2(r91,l0) costs: AREG:2,2 DREG:2,2 CREG:2,2 BREG:2,2 SIREG:-1,-1 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 TLS_GOTBASE_REGS:2,2 GENERAL_REGS:2,2 SSE_FIRST_REG:12,12 NO_REX_SSE_REGS:12,12 SSE_REGS:12,12 MMX_REGS:23,23 INT_SSE_REGS:23,23 ALL_REGS:316,316 MEM:11,11
  a3(r90,l0) costs: AREG:2,2 DREG:2,2 CREG:-1,-1 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 TLS_GOTBASE_REGS:2,2 GENERAL_REGS:2,2 SSE_FIRST_REG:12,12 NO_REX_SSE_REGS:12,12 SSE_REGS:12,12 MMX_REGS:23,23 INT_SSE_REGS:23,23 ALL_REGS:316,316 MEM:11,11
  a4(r97,l0) costs: AREG:-1000,-1000 DREG:2000,2000 CREG:2000,2000 BREG:2000,2000 SIREG:2000,2000 DIREG:2000,2000 AD_REGS:2000,2000 CLOBBERED_REGS:2000,2000 Q_REGS:2000,2000 NON_Q_REGS:2000,2000 TLS_GOTBASE_REGS:2000,2000 GENERAL_REGS:2000,2000 SSE_FIRST_REG:12000,12000 NO_REX_SSE_REGS:12000,12000 SSE_REGS:12000,12000 MMX_REGS:26000,26000 INT_SSE_REGS:26000,26000 ALL_REGS:424000,424000 MEM:11000,11000
  a5(r89,l0) costs: AREG:2000,2000 DREG:2000,2000 CREG:2000,2000 BREG:2000,2000 SIREG:2000,2000 DIREG:-1000,-1000 AD_REGS:2000,2000 CLOBBERED_REGS:2000,2000 Q_REGS:2000,2000 NON_Q_REGS:2000,2000 TLS_GOTBASE_REGS:2000,2000 GENERAL_REGS:2000,2000 SSE_FIRST_REG:12000,12000 NO_REX_SSE_REGS:12000,12000 SSE_REGS:12000,12000 MMX_REGS:23000,23000 INT_SSE_REGS:23000,23000 ALL_REGS:316000,316000 MEM:11000,11000
  a6(r88,l0) costs: AREG:2000,2000 DREG:2000,2000 CREG:2000,2000 BREG:2000,2000 SIREG:-1000,-1000 DIREG:2000,2000 AD_REGS:2000,2000 CLOBBERED_REGS:2000,2000 Q_REGS:2000,2000 NON_Q_REGS:2000,2000 TLS_GOTBASE_REGS:2000,2000 GENERAL_REGS:2000,2000 SSE_FIRST_REG:12000,12000 NO_REX_SSE_REGS:12000,12000 SSE_REGS:12000,12000 MMX_REGS:26000,26000 INT_SSE_REGS:26000,26000 ALL_REGS:424000,424000 MEM:12000,12000
  a7(r87,l0) costs: AREG:2000,2000 DREG:-1000,-1000 CREG:2000,2000 BREG:2000,2000 SIREG:2000,2000 DIREG:2000,2000 AD_REGS:2000,2000 CLOBBERED_REGS:2000,2000 Q_REGS:2000,2000 NON_Q_REGS:2000,2000 TLS_GOTBASE_REGS:2000,2000 GENERAL_REGS:2000,2000 SSE_FIRST_REG:12000,12000 NO_REX_SSE_REGS:12000,12000 SSE_REGS:12000,12000 MMX_REGS:26000,26000 INT_SSE_REGS:26000,26000 ALL_REGS:424000,424000 MEM:12000,12000
  a8(r98,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 TLS_GOTBASE_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:6000,6000 NO_REX_SSE_REGS:6000,6000 SSE_REGS:6000,6000 MMX_REGS:13000,13000 INT_SSE_REGS:13000,13000 ALL_REGS:212000,212000 MEM:6000,6000


Pass 1 for finding pseudo/allocno costs

    r99: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r98: preferred GENERAL_REGS, alternative NO_REGS, allocno GENERAL_REGS
    r97: preferred AREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r92: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r91: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r90: preferred CREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r89: preferred DIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r88: preferred SIREG, alternative GENERAL_REGS, allocno GENERAL_REGS
    r87: preferred DREG, alternative GENERAL_REGS, allocno GENERAL_REGS

  a0(r99,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:5994,5994 NO_REX_SSE_REGS:5994,5994 SSE_REGS:5994,5994 MMX_REGS:12987,12987 INT_SSE_REGS:12987,12987 ALL_REGS:211788,211788 MEM:5994,5994
  a1(r92,l0) costs: AREG:4,4 DREG:4,4 CREG:4,4 BREG:4,4 SIREG:4,4 DIREG:2,-1 AD_REGS:4,4 CLOBBERED_REGS:2,2 Q_REGS:4,4 NON_Q_REGS:2,2 TLS_GOTBASE_REGS:2,2 GENERAL_REGS:2,2 SSE_FIRST_REG:18,18 NO_REX_SSE_REGS:18,18 SSE_REGS:18,18 MMX_REGS:39,39 INT_SSE_REGS:26,26 ALL_REGS:322,322 MEM:18,18
  a2(r91,l0) costs: AREG:4,4 DREG:4,4 CREG:4,4 BREG:4,4 SIREG:2,-1 DIREG:4,4 AD_REGS:4,4 CLOBBERED_REGS:2,2 Q_REGS:4,4 NON_Q_REGS:2,2 TLS_GOTBASE_REGS:2,2 GENERAL_REGS:2,2 SSE_FIRST_REG:18,18 NO_REX_SSE_REGS:18,18 SSE_REGS:18,18 MMX_REGS:39,39 INT_SSE_REGS:26,26 ALL_REGS:322,322 MEM:18,18
  a3(r90,l0) costs: AREG:4,4 DREG:4,4 CREG:2,-1 BREG:4,4 SIREG:4,4 DIREG:4,4 AD_REGS:4,4 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:4,4 TLS_GOTBASE_REGS:2,2 GENERAL_REGS:2,2 SSE_FIRST_REG:18,18 NO_REX_SSE_REGS:18,18 SSE_REGS:18,18 MMX_REGS:39,39 INT_SSE_REGS:26,26 ALL_REGS:322,322 MEM:18,18
  a4(r97,l0) costs: AREG:2000,-1000 DREG:4000,4000 CREG:4000,4000 BREG:4000,4000 SIREG:4000,4000 DIREG:4000,4000 AD_REGS:2000,2000 CLOBBERED_REGS:2000,2000 Q_REGS:2000,2000 NON_Q_REGS:4000,4000 TLS_GOTBASE_REGS:4000,4000 GENERAL_REGS:2000,2000 SSE_FIRST_REG:18000,18000 NO_REX_SSE_REGS:18000,18000 SSE_REGS:18000,18000 MMX_REGS:39000,39000 INT_SSE_REGS:26000,26000 ALL_REGS:424000,424000 MEM:17000,17000
  a5(r89,l0) costs: AREG:4000,4000 DREG:4000,4000 CREG:4000,4000 BREG:4000,4000 SIREG:4000,4000 DIREG:2000,-1000 AD_REGS:4000,4000 CLOBBERED_REGS:2000,2000 Q_REGS:4000,4000 NON_Q_REGS:2000,2000 TLS_GOTBASE_REGS:2000,2000 GENERAL_REGS:2000,2000 SSE_FIRST_REG:18000,18000 NO_REX_SSE_REGS:18000,18000 SSE_REGS:18000,18000 MMX_REGS:39000,39000 INT_SSE_REGS:26000,26000 ALL_REGS:322000,322000 MEM:18000,18000
  a6(r88,l0) costs: AREG:4000,4000 DREG:4000,4000 CREG:4000,4000 BREG:4000,4000 SIREG:2000,-1000 DIREG:4000,4000 AD_REGS:4000,4000 CLOBBERED_REGS:2000,2000 Q_REGS:4000,4000 NON_Q_REGS:2000,2000 TLS_GOTBASE_REGS:2000,2000 GENERAL_REGS:2000,2000 SSE_FIRST_REG:18000,18000 NO_REX_SSE_REGS:18000,18000 SSE_REGS:18000,18000 MMX_REGS:39000,39000 INT_SSE_REGS:26000,26000 ALL_REGS:424000,424000 MEM:18000,18000
  a7(r87,l0) costs: AREG:4000,4000 DREG:2000,-1000 CREG:4000,4000 BREG:4000,4000 SIREG:4000,4000 DIREG:4000,4000 AD_REGS:2000,2000 CLOBBERED_REGS:2000,2000 Q_REGS:2000,2000 NON_Q_REGS:4000,4000 TLS_GOTBASE_REGS:2000,2000 GENERAL_REGS:2000,2000 SSE_FIRST_REG:18000,18000 NO_REX_SSE_REGS:18000,18000 SSE_REGS:18000,18000 MMX_REGS:39000,39000 INT_SSE_REGS:26000,26000 ALL_REGS:424000,424000 MEM:18000,18000
  a8(r98,l0) costs: GENERAL_REGS:0,0 SSE_FIRST_REG:6000,6000 NO_REX_SSE_REGS:6000,6000 SSE_REGS:6000,6000 MMX_REGS:13000,13000 INT_SSE_REGS:13000,13000 ALL_REGS:212000,212000 MEM:6000,6000

   Insn 46(l0): point = 0
   Insn 45(l0): point = 2
   Insn 42(l0): point = 5
   Insn 41(l0): point = 8
   Insn 40(l0): point = 10
   Insn 34(l0): point = 12
   Insn 33(l0): point = 14
   Insn 32(l0): point = 16
   Insn 26(l0): point = 19
   Insn 25(l0): point = 21
   Insn 24(l0): point = 23
   Insn 23(l0): point = 25
   Insn 22(l0): point = 27
   Insn 21(l0): point = 29
   Insn 20(l0): point = 31
   Insn 19(l0): point = 33
   Insn 17(l0): point = 36
   Insn 16(l0): point = 38
   Insn 50(l0): point = 40
   Insn 14(l0): point = 42
   Insn 13(l0): point = 44
   Insn 12(l0): point = 46
   Insn 11(l0): point = 48
   Insn 10(l0): point = 50
   Insn 9(l0): point = 52
   Insn 8(l0): point = 54
   Insn 7(l0): point = 56
   Insn 4(l0): point = 58
 a0(r99): [10..10]
 a1(r92): [22..23]
 a2(r91): [26..27]
 a3(r90): [32..33]
 a4(r97): [39..40]
 a5(r89): [47..48]
 a6(r88): [51..54]
 a7(r87): [53..56]
 a8(r98): [58..58]
Compressing live ranges: from 61 to 14 - 22%
Ranges after the compression:
 a0(r99): [0..0]
 a1(r92): [1..2]
 a2(r91): [3..4]
 a3(r90): [5..6]
 a4(r97): [7..8]
 a5(r89): [9..10]
 a6(r88): [11..12]
 a7(r87): [11..12]
 a8(r98): [13..13]
+++Allocating 16 bytes for conflict table (uncompressed size 72)
;; a0(r99,l0) conflicts:
;;     total conflict hard regs:
;;     conflict hard regs:

;; a1(r92,l0) conflicts:
;;     total conflict hard regs:
;;     conflict hard regs:

;; a2(r91,l0) conflicts:
;;     total conflict hard regs:
;;     conflict hard regs:

;; a3(r90,l0) conflicts:
;;     total conflict hard regs:
;;     conflict hard regs:

;; a4(r97,l0) conflicts:
;;     total conflict hard regs:
;;     conflict hard regs:

;; a5(r89,l0) conflicts:
;;     total conflict hard regs:
;;     conflict hard regs:

;; a6(r88,l0) conflicts: a7(r87,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

;; a7(r87,l0) conflicts: a6(r88,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

;; a8(r98,l0) conflicts:
;;     total conflict hard regs:
;;     conflict hard regs:


  pref0:a4(r97)<-hr0@1500
  pref1:a1(r92)<-hr5@1
  pref2:a2(r91)<-hr4@1
  pref3:a3(r90)<-hr2@1
  pref4:a5(r89)<-hr5@1500
  pref5:a6(r88)<-hr4@1500
  pref6:a7(r87)<-hr1@1500
  regions=1, blocks=7, points=14
    allocnos=9 (big 0), copies=0, conflicts=0, ranges=9

**** Allocnos coloring:


  Loop 0 (parent -1, header bb2, depth 0)
    bbs: 6 5 4 3 2
    all: 0r99 1r92 2r91 3r90 4r97 5r89 6r88 7r87 8r98
    modified regnos: 87 88 89 90 91 92 97 98 99
    border:
    Pressure: GENERAL_REGS=4
    Hard reg set forest:
      0:( 0-6 8-15 20-51)@0
        1:( 0-6 36-43)@98026
          2:( 0 2-6 36-43)@38000
            3:( 0 2-3 5-6 36-43)@38000
              4:( 0 3 5-6 36-43)@76
      Allocno a0r99 of GENERAL_REGS(15) has 15 avail. regs  0-6 36-43, node:  0-6 36-43 (confl regs =  7-35 44-75)
      Allocno a1r92 of GENERAL_REGS(15) has 12 avail. regs  0 3 5-6 36-43, node:  0 3 5-6 36-43 (confl regs =  1-2 4 7-35 44-75)
      Allocno a2r91 of GENERAL_REGS(15) has 13 avail. regs  0 3-6 36-43, ^node:  0 2-6 36-43 (confl regs =  1-2 7-35 44-75)
      Allocno a3r90 of GENERAL_REGS(15) has 15 avail. regs  0-6 36-43, node:  0-6 36-43 (confl regs =  7-35 44-75)
      Allocno a4r97 of GENERAL_REGS(15) has 15 avail. regs  0-6 36-43, node:  0-6 36-43 (confl regs =  7-35 44-75)
      Allocno a5r89 of GENERAL_REGS(15) has 13 avail. regs  0 2-3 5-6 36-43, node:  0 2-3 5-6 36-43 (confl regs =  1 4 7-35 44-75)
      Allocno a6r88 of GENERAL_REGS(15) has 14 avail. regs  0 2-6 36-43, node:  0 2-6 36-43 (confl regs =  1 7-35 44-75)
      Allocno a7r87 of GENERAL_REGS(15) has 15 avail. regs  0-6 36-43, node:  0-6 36-43 (confl regs =  7-35 44-75)
      Allocno a8r98 of GENERAL_REGS(15) has 15 avail. regs  0-6 36-43, node:  0-6 36-43 (confl regs =  7-35 44-75)
      Forming thread from colorable bucket:
      Pushing a3(r90,l0)(cost 0)
      Pushing a2(r91,l0)(cost 0)
      Pushing a1(r92,l0)(cost 0)
      Pushing a0(r99,l0)(cost 0)
      Pushing a8(r98,l0)(cost 0)
      Pushing a7(r87,l0)(cost 0)
      Pushing a6(r88,l0)(cost 0)
      Pushing a5(r89,l0)(cost 0)
      Pushing a4(r97,l0)(cost 0)
      Popping a4(r97,l0)  --         assign reg 0
      Popping a5(r89,l0)  --         assign reg 5
      Popping a6(r88,l0)  --         assign reg 4
      Popping a7(r87,l0)  --         assign reg 1
      Popping a8(r98,l0)  --         assign reg 0
      Popping a0(r99,l0)  --         assign reg 0
      Popping a1(r92,l0)  --         assign reg 5
      Popping a2(r91,l0)  --         assign reg 4
      Popping a3(r90,l0)  --         assign reg 2
Disposition:
    7:r87  l0     1    6:r88  l0     4    5:r89  l0     5    3:r90  l0     2
    2:r91  l0     4    1:r92  l0     5    4:r97  l0     0    8:r98  l0     0
    0:r99  l0     0
New iteration of spill/restore move
+++Costs: overall -4003, reg -4003, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


main

Dataflow summary:
;;  fully invalidated by EH 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 28 [mm0] 29 [mm1] 30 [mm2] 31 [mm3] 32 [mm4] 33 [mm5] 34 [mm6] 35 [mm7] 36 [r8] 37 [r9] 38 [r10] 39 [r11] 44 [xmm8] 45 [xmm9] 46 [xmm10] 47 [xmm11] 48 [xmm12] 49 [xmm13] 50 [xmm14] 51 [xmm15] 52 [xmm16] 53 [xmm17] 54 [xmm18] 55 [xmm19] 56 [xmm20] 57 [xmm21] 58 [xmm22] 59 [xmm23] 60 [xmm24] 61 [xmm25] 62 [xmm26] 63 [xmm27] 64 [xmm28] 65 [xmm29] 66 [xmm30] 67 [xmm31] 68 [k0] 69 [k1] 70 [k2] 71 [k3] 72 [k4] 73 [k5] 74 [k6] 75 [k7]
;;  hardware regs used 	 7 [sp] 16 [argp] 19 [frame]
;;  regular block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 19 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 19 [frame] 20 [xmm0] 21 [xmm1] 22 [xmm2] 23 [xmm3] 24 [xmm4] 25 [xmm5] 26 [xmm6] 27 [xmm7] 36 [r8] 37 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 19 [frame]
;;  regs ever live 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 17 [flags]
;;  ref usage 	r0={7d,4u} r1={7d,2u} r2={6d,1u} r4={8d,3u} r5={8d,3u} r6={1d,6u} r7={1d,10u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r16={1d,5u} r17={9d,2u} r18={4d} r19={1d,12u,4e} r20={5d} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={5d} r37={5d} r38={4d} r39={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r87={1d,1u} r88={1d,1u} r89={1d,1u} r90={1d,1u} r91={1d,1u} r92={1d,1u} r97={1d,1u} r98={1d} r99={1d} 
;;    total ref usage 371{312d,55u,4e} in 28{24 regular + 4 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 5 4 2 NOTE_INSN_FUNCTION_BEG)
(insn 4 2 7 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 19 frame)
                        (const_int -8 [0xfffffffffffffff8])) [2 D.3268+0 S8 A64])
                (unspec:DI [
                        (mem/v/f:DI (const_int 40 [0x28]) [3 MEM[(<address-space-1> long unsigned int *)40B]+0 S8 A64 AS1])
                    ] UNSPEC_SP_SET))
            (set (reg:DI 98)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) "ns.c":8:1 1159 {stack_protect_set_1_di}
     (expr_list:REG_UNUSED (reg:DI 98)
        (expr_list:REG_UNUSED (reg:CC 17 flags)
            (nil))))
(insn 7 4 8 2 (parallel [
            (set (reg/f:DI 87)
                (plus:DI (reg/f:DI 19 frame)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "ns.c":11:7 210 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUIV (plus:DI (reg/f:DI 19 frame)
                (const_int -12 [0xfffffffffffffff4]))
            (nil))))
(insn 8 7 9 2 (parallel [
            (set (reg/f:DI 88)
                (plus:DI (reg/f:DI 19 frame)
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) "ns.c":11:7 210 {*adddi_1}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_EQUIV (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0]))
            (nil))))
(insn 9 8 10 2 (set (reg:DI 1 dx)
        (reg/f:DI 87)) "ns.c":11:7 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 87)
        (expr_list:REG_EQUAL (plus:DI (reg/f:DI 19 frame)
                (const_int -12 [0xfffffffffffffff4]))
            (nil))))
(insn 10 9 11 2 (set (reg:DI 4 si)
        (reg/f:DI 88)) "ns.c":11:7 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 88)
        (expr_list:REG_EQUAL (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0]))
            (nil))))
(insn 11 10 12 2 (set (reg/f:DI 89)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7fd1afc511b0 *.LC1>)) "ns.c":11:7 74 {*movdi_internal}
     (expr_list:REG_EQUIV (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7fd1afc511b0 *.LC1>)
        (nil)))
(insn 12 11 13 2 (set (reg:DI 5 di)
        (reg/f:DI 89)) "ns.c":11:7 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 89)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7fd1afc511b0 *.LC1>)
            (nil))))
(insn 13 12 14 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "ns.c":11:7 77 {*movqi_internal}
     (nil))
(call_insn 14 13 50 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*__isoc99_scanf") [flags 0x41]  <function_decl 0x7fd1afeecd00 scanf>) [0 __builtin_scanf S1 A8])
            (const_int 0 [0]))) "ns.c":11:7 824 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_CALL_DECL (symbol_ref:DI ("*__isoc99_scanf") [flags 0x41]  <function_decl 0x7fd1afeecd00 scanf>)
                    (nil)))))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 50 14 15 2 (set (reg:SI 97)
        (reg:SI 0 ax)) "ns.c":11:7 75 {*movsi_internal}
     (expr_list:REG_DEAD (reg:SI 0 ax)
        (nil)))
(note 15 50 16 2 NOTE_INSN_DELETED)
(insn 16 15 17 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 97)
            (const_int 2 [0x2]))) "ns.c":13:1 11 {*cmpsi_1}
     (expr_list:REG_DEAD (reg:SI 97)
        (nil)))
(jump_insn 17 16 18 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 28)
            (pc))) "ns.c":13:1 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1073312332 (nil)))
 -> 28)
(note 18 17 19 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 20 3 (set (reg/f:DI 90)
        (symbol_ref:DI ("__PRETTY_FUNCTION__.0") [flags 0x2]  <var_decl 0x7fd1b0000870 __PRETTY_FUNCTION__>)) "ns.c":13:1 74 {*movdi_internal}
     (expr_list:REG_EQUIV (symbol_ref:DI ("__PRETTY_FUNCTION__.0") [flags 0x2]  <var_decl 0x7fd1b0000870 __PRETTY_FUNCTION__>)
        (nil)))
(insn 20 19 21 3 (set (reg:DI 2 cx)
        (reg/f:DI 90)) "ns.c":13:1 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 90)
        (expr_list:REG_EQUAL (symbol_ref:DI ("__PRETTY_FUNCTION__.0") [flags 0x2]  <var_decl 0x7fd1b0000870 __PRETTY_FUNCTION__>)
            (nil))))
(insn 21 20 22 3 (set (reg:SI 1 dx)
        (const_int 13 [0xd])) "ns.c":13:1 75 {*movsi_internal}
     (nil))
(insn 22 21 23 3 (set (reg/f:DI 91)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7fd1afc51240 *.LC2>)) "ns.c":13:1 74 {*movdi_internal}
     (expr_list:REG_EQUIV (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7fd1afc51240 *.LC2>)
        (nil)))
(insn 23 22 24 3 (set (reg:DI 4 si)
        (reg/f:DI 91)) "ns.c":13:1 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 91)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7fd1afc51240 *.LC2>)
            (nil))))
(insn 24 23 25 3 (set (reg/f:DI 92)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7fd1afc512d0 *.LC3>)) "ns.c":13:1 74 {*movdi_internal}
     (expr_list:REG_EQUIV (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7fd1afc512d0 *.LC3>)
        (nil)))
(insn 25 24 26 3 (set (reg:DI 5 di)
        (reg/f:DI 92)) "ns.c":13:1 74 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 92)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7fd1afc512d0 *.LC3>)
            (nil))))
(call_insn 26 25 27 3 (call (mem:QI (symbol_ref:DI ("__assert_fail") [flags 0x41]  <function_decl 0x7fd1aff97b00 __assert_fail>) [0 __assert_fail S1 A8])
        (const_int 0 [0])) "ns.c":13:1 813 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 2 cx)
                (expr_list:REG_DEAD (reg:SI 1 dx)
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("__assert_fail") [flags 0x41]  <function_decl 0x7fd1aff97b00 __assert_fail>)
                        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
                            (expr_list:REG_NORETURN (const_int 0 [0])
                                (expr_list:REG_EH_REGION (const_int 0 [0])
                                    (nil)))))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(barrier 27 26 28)
(code_label 28 27 29 4 14 (nil) [1 uses])
(note 29 28 32 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 32 29 33 4 (set (reg:SI 4 si)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -12 [0xfffffffffffffff4])) [1 y+0 S4 A32])) "ns.c":15:1 75 {*movsi_internal}
     (nil))
(insn 33 32 34 4 (set (reg:SI 5 di)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [1 x+0 S4 A64])) "ns.c":15:1 75 {*movsi_internal}
     (nil))
(call_insn 34 33 40 4 (call (mem:QI (symbol_ref:DI ("print_conv") [flags 0x3]  <function_decl 0x7fd1afc1bd00 print_conv>) [0 print_conv S1 A8])
        (const_int 0 [0])) "ns.c":15:1 813 {*call}
     (expr_list:REG_DEAD (reg:SI 5 di)
        (expr_list:REG_DEAD (reg:SI 4 si)
            (expr_list:REG_CALL_DECL (symbol_ref:DI ("print_conv") [flags 0x3]  <function_decl 0x7fd1afc1bd00 print_conv>)
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 40 34 41 4 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -8 [0xfffffffffffffff8])) [2 D.3268+0 S8 A64])
                        (mem/v/f:DI (const_int 40 [0x28]) [3 MEM[(<address-space-1> long unsigned int *)40B]+0 S8 A64 AS1])
                    ] UNSPEC_SP_TEST))
            (clobber (reg:DI 99))
        ]) "ns.c":17:1 1164 {stack_protect_test_1_di}
     (expr_list:REG_UNUSED (reg:DI 99)
        (nil)))
(jump_insn 41 40 48 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 44)
            (pc))) "ns.c":17:1 806 {*jcc}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1073312332 (nil)))
 -> 44)
(note 48 41 42 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(call_insn 42 48 43 5 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7fd1afc2e900 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) "ns.c":17:1 813 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7fd1afc2e900 __stack_chk_fail>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (nil))
(barrier 43 42 44)
(code_label 44 43 49 6 15 (nil) [1 uses])
(note 49 44 45 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 45 49 46 6 (set (reg/i:SI 0 ax)
        (const_int 0 [0])) "ns.c":17:1 75 {*movsi_internal}
     (nil))
(insn 46 45 0 6 (use (reg/i:SI 0 ax)) "ns.c":17:1 -1
     (nil))
