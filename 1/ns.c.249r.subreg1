
;; Function print_conv (print_conv, funcdef_no=40, decl_uid=3195, cgraph_uid=41, symbol_order=40)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode POI for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode CPOI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Splitting mode V12QI for copy lowering.
  Splitting mode V6HI for copy lowering.
  Splitting mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Splitting mode V64SI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Splitting mode V64SF for copy lowering.
  Splitting mode V32DF for copy lowering.
  Splitting mode V16TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode POI for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode CPOI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Splitting mode V12QI for copy lowering.
  Splitting mode V6HI for copy lowering.
  Splitting mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Splitting mode V64SI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Splitting mode V64SF for copy lowering.
  Splitting mode V32DF for copy lowering.
  Splitting mode V16TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
(note 8 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (reg/v:SI 91 [ x ])
        (reg:SI 5 di [ x ])) "ns.c":20:1 75 {*movsi_internal}
     (nil))
(insn 3 2 4 2 (set (reg/v:SI 92 [ y ])
        (reg:SI 4 si [ y ])) "ns.c":20:1 75 {*movsi_internal}
     (nil))
(note 4 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 4 6 2 (set (reg/f:DI 93)
        (const_int 40 [0x28])) "ns.c":20:1 74 {*movdi_internal}
     (nil))
(insn 6 5 10 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 19 frame)
                        (const_int -8 [0xfffffffffffffff8])) [2 D.3260+0 S8 A64])
                (unspec:DI [
                        (mem/v/f:DI (reg/f:DI 93) [3 MEM[(<address-space-1> long unsigned int *)40B]+0 S8 A64 AS1])
                    ] UNSPEC_SP_SET))
            (set (scratch:DI)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) "ns.c":20:1 1159 {stack_protect_set_1_di}
     (nil))
(insn 10 6 11 2 (parallel [
            (set (reg/f:DI 94)
                (plus:DI (reg/f:DI 19 frame)
                    (const_int -144 [0xffffffffffffff70])))
            (clobber (reg:CC 17 flags))
        ]) "ns.c":21:15 210 {*adddi_1}
     (nil))
(insn 11 10 12 2 (set (reg:DI 95)
        (const_int 0 [0])) "ns.c":21:15 74 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 96)
        (const_int 16 [0x10])) "ns.c":21:15 74 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (parallel [
            (set (reg:DI 96)
                (const_int 0 [0]))
            (set (reg/f:DI 94)
                (plus:DI (ashift:DI (reg:DI 96)
                        (const_int 3 [0x3]))
                    (reg/f:DI 94)))
            (set (mem/c:BLK (reg/f:DI 94) [1 num+0 S128 A128])
                (const_int 0 [0]))
            (use (reg:DI 95))
            (use (reg:DI 96))
        ]) "ns.c":21:15 1080 {*rep_stosdi_rex64}
     (nil))
(insn 14 13 15 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 91 [ x ])
            (const_int 0 [0]))) "ns.c":23:9 7 {*cmpsi_ccno_1}
     (nil))
(jump_insn 15 14 66 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 66)
            (pc))) "ns.c":23:9 806 {*jcc}
     (int_list:REG_BR_PROB 955630228 (nil))
 -> 66)
      ; pc falls through to BB 8
(code_label 66 15 65 3 7 (nil) [1 uses])
(note 65 66 7 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 7 65 19 3 (set (reg:DI 90 [ ivtmp.30 ])
        (const_int 0 [0])) "ns.c":23:9 74 {*movdi_internal}
     (nil))
(code_label 19 7 20 4 2 (nil) [1 uses])
(note 20 19 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 4 (set (reg/v:SI 89 [ k ])
        (subreg:SI (reg:DI 90 [ ivtmp.30 ]) 0)) 75 {*movsi_internal}
     (nil))
(insn 22 21 23 4 (parallel [
            (set (reg:SI 97)
                (udiv:SI (reg/v:SI 91 [ x ])
                    (reg/v:SI 92 [ y ])))
            (set (reg:SI 98)
                (umod:SI (reg/v:SI 91 [ x ])
                    (reg/v:SI 92 [ y ])))
            (clobber (reg:CC 17 flags))
        ]) 449 {*udivmodsi4}
     (nil))
(insn 23 22 24 4 (set (reg:SI 86 [ divmod_tmp_12 ])
        (reg:SI 97)) 75 {*movsi_internal}
     (nil))
(insn 24 23 25 4 (set (reg:SI 87 [ divmod_tmp_12+4 ])
        (reg:SI 98)) 75 {*movsi_internal}
     (nil))
(insn 25 24 26 4 (set (reg:SI 85 [ prephitmp_6 ])
        (reg:SI 87 [ divmod_tmp_12+4 ])) "ns.c":25:14 75 {*movsi_internal}
     (nil))
(insn 26 25 27 4 (parallel [
            (set (reg:DI 99)
                (plus:DI (reg/f:DI 19 frame)
                    (const_int -144 [0xffffffffffffff70])))
            (clobber (reg:CC 17 flags))
        ]) "ns.c":25:10 210 {*adddi_1}
     (nil))
(insn 27 26 28 4 (set (mem:SI (plus:DI (mult:DI (reg:DI 90 [ ivtmp.30 ])
                    (const_int 4 [0x4]))
                (reg:DI 99)) [1 MEM[(unsigned int *)&num + ivtmp.30_29 * 4]+0 S4 A32])
        (reg:SI 85 [ prephitmp_6 ])) "ns.c":25:10 75 {*movsi_internal}
     (nil))
(insn 28 27 29 4 (set (reg/v:SI 82 [ x ])
        (reg/v:SI 91 [ x ])) 75 {*movsi_internal}
     (nil))
(insn 29 28 30 4 (set (reg/v:SI 91 [ x ])
        (reg:SI 86 [ divmod_tmp_12 ])) "ns.c":26:5 75 {*movsi_internal}
     (nil))
(insn 30 29 31 4 (parallel [
            (set (reg:DI 90 [ ivtmp.30 ])
                (plus:DI (reg:DI 90 [ ivtmp.30 ])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) "ns.c":23:9 210 {*adddi_1}
     (nil))
(insn 31 30 32 4 (set (reg:CC 17 flags)
        (compare:CC (reg/v:SI 92 [ y ])
            (reg/v:SI 82 [ x ]))) "ns.c":23:9 11 {*cmpsi_1}
     (nil))
(jump_insn 32 31 33 4 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 19)
            (pc))) "ns.c":23:9 806 {*jcc}
     (int_list:REG_BR_PROB 955630228 (nil))
 -> 19)
(note 33 32 34 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 34 33 35 5 (parallel [
            (set (reg:SI 100)
                (plus:SI (reg/v:SI 89 [ k ])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) 209 {*addsi_1}
     (nil))
(insn 35 34 50 5 (set (reg:DI 84 [ ivtmp.15 ])
        (sign_extend:DI (reg:SI 100))) 147 {*extendsidi2_rex64}
     (nil))
      ; pc falls through to BB 7
(code_label 50 35 38 6 4 (nil) [1 uses])
(note 38 50 39 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 40 6 (parallel [
            (set (reg:DI 101)
                (plus:DI (reg/f:DI 19 frame)
                    (const_int -144 [0xffffffffffffff70])))
            (clobber (reg:CC 17 flags))
        ]) "ns.c":31:3 210 {*adddi_1}
     (nil))
(insn 40 39 41 6 (set (reg:SI 85 [ prephitmp_6 ])
        (mem:SI (plus:DI (mult:DI (reg:DI 84 [ ivtmp.15 ])
                    (const_int 4 [0x4]))
                (reg:DI 101)) [1 MEM[(unsigned int *)&num + ivtmp.15_5 * 4]+0 S4 A32])) "ns.c":31:3 75 {*movsi_internal}
     (nil))
(insn 41 40 42 6 (parallel [
            (set (reg:DI 84 [ ivtmp.15 ])
                (plus:DI (reg:DI 84 [ ivtmp.15 ])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) 210 {*adddi_1}
     (nil))
(code_label 42 41 43 7 3 (nil) [0 uses])
(note 43 42 44 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 7 (set (reg:SI 1 dx)
        (reg:SI 85 [ prephitmp_6 ])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":112:10 75 {*movsi_internal}
     (nil))
(insn 45 44 46 7 (set (reg:DI 102)
        (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7fd1afc415a0 *.LC0>)) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":112:10 74 {*movdi_internal}
     (nil))
(insn 46 45 47 7 (set (reg:DI 4 si)
        (reg:DI 102)) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":112:10 74 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC0") [flags 0x2]  <var_decl 0x7fd1afc415a0 *.LC0>)
        (nil)))
(insn 47 46 48 7 (set (reg:SI 5 di)
        (const_int 1 [0x1])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":112:10 75 {*movsi_internal}
     (nil))
(insn 48 47 49 7 (set (reg:QI 0 ax)
        (const_int 0 [0])) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":112:10 77 {*movqi_internal}
     (nil))
(call_insn 49 48 51 7 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x7fd1aff14c00 __printf_chk>) [0 __builtin___printf_chk S1 A8])
            (const_int 0 [0]))) "/usr/include/x86_64-linux-gnu/bits/stdio2.h":112:10 824 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x7fd1aff14c00 __printf_chk>)
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:SI (use (reg:SI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:SI (use (reg:SI 1 dx))
                    (nil))))))
(insn 51 49 52 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (subreg:SI (reg:DI 84 [ ivtmp.15 ]) 0)
            (const_int -1 [0xffffffffffffffff]))) "ns.c":30:10 11 {*cmpsi_1}
     (nil))
(jump_insn 52 51 57 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 50)
            (pc))) "ns.c":30:10 806 {*jcc}
     (int_list:REG_BR_PROB 955630228 (nil))
 -> 50)
(code_label 57 52 64 8 1 (nil) [0 uses])
(note 64 57 58 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 58 64 59 8 (set (reg/f:DI 103)
        (const_int 40 [0x28])) "ns.c":32:1 74 {*movdi_internal}
     (nil))
(insn 59 58 60 8 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -8 [0xfffffffffffffff8])) [2 D.3260+0 S8 A64])
                        (mem/v/f:DI (reg/f:DI 103) [3 MEM[(<address-space-1> long unsigned int *)40B]+0 S8 A64 AS1])
                    ] UNSPEC_SP_TEST))
            (clobber (scratch:DI))
        ]) "ns.c":32:1 1164 {stack_protect_test_1_di}
     (nil))
(jump_insn 60 59 67 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 63)
            (pc))) "ns.c":32:1 806 {*jcc}
     (int_list:REG_BR_PROB 1073312332 (nil))
 -> 63)
(note 67 60 61 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(call_insn 61 67 63 9 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7fd1afc2e900 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) "ns.c":32:1 813 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7fd1afc2e900 __stack_chk_fail>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (nil))
(code_label 63 61 68 10 6 (nil) [1 uses])
(note 68 63 0 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

;; Function main (main, funcdef_no=39, decl_uid=3196, cgraph_uid=40, symbol_order=39) (executed once)

Choices when optimizing for size:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode POI for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode CPOI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Splitting mode V12QI for copy lowering.
  Splitting mode V6HI for copy lowering.
  Splitting mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Splitting mode V64SI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Splitting mode V64SF for copy lowering.
  Splitting mode V32DF for copy lowering.
  Splitting mode V16TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Choices when optimizing for speed:
  Splitting mode TI for copy lowering.
  Splitting mode OI for copy lowering.
  Splitting mode XI for copy lowering.
  Splitting mode POI for copy lowering.
  Splitting mode TQ for copy lowering.
  Splitting mode UTQ for copy lowering.
  Splitting mode TA for copy lowering.
  Splitting mode UTA for copy lowering.
  Skipping mode XF for copy lowering.
  Skipping mode TF for copy lowering.
  Splitting mode TD for copy lowering.
  Splitting mode CDI for copy lowering.
  Splitting mode CTI for copy lowering.
  Splitting mode CPOI for copy lowering.
  Splitting mode COI for copy lowering.
  Splitting mode CXI for copy lowering.
  Skipping mode DC for copy lowering.
  Skipping mode XC for copy lowering.
  Skipping mode TC for copy lowering.
  Splitting mode V12QI for copy lowering.
  Splitting mode V6HI for copy lowering.
  Splitting mode V14QI for copy lowering.
  Skipping mode V16QI for copy lowering.
  Skipping mode V8HI for copy lowering.
  Skipping mode V4SI for copy lowering.
  Skipping mode V2DI for copy lowering.
  Skipping mode V1TI for copy lowering.
  Splitting mode V32QI for copy lowering.
  Splitting mode V16HI for copy lowering.
  Splitting mode V8SI for copy lowering.
  Splitting mode V4DI for copy lowering.
  Splitting mode V2TI for copy lowering.
  Splitting mode V64QI for copy lowering.
  Splitting mode V32HI for copy lowering.
  Splitting mode V16SI for copy lowering.
  Splitting mode V8DI for copy lowering.
  Splitting mode V4TI for copy lowering.
  Splitting mode V128QI for copy lowering.
  Splitting mode V64HI for copy lowering.
  Splitting mode V32SI for copy lowering.
  Splitting mode V16DI for copy lowering.
  Splitting mode V8TI for copy lowering.
  Splitting mode V64SI for copy lowering.
  Skipping mode V4SF for copy lowering.
  Skipping mode V2DF for copy lowering.
  Splitting mode V8SF for copy lowering.
  Splitting mode V4DF for copy lowering.
  Splitting mode V2TF for copy lowering.
  Splitting mode V16SF for copy lowering.
  Splitting mode V8DF for copy lowering.
  Splitting mode V4TF for copy lowering.
  Splitting mode V32SF for copy lowering.
  Splitting mode V16DF for copy lowering.
  Splitting mode V8TF for copy lowering.
  Splitting mode V64SF for copy lowering.
  Splitting mode V32DF for copy lowering.
  Splitting mode V16TF for copy lowering.
  Skipping mode TI for zero_extend lowering.
  Splitting mode TI for ashift lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for lshiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127
  Splitting mode TI for ashiftrt lowering with shift amounts = 64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127

Nothing to lower in this function.
(note 5 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 5 3 2 NOTE_INSN_FUNCTION_BEG)
(insn 3 2 4 2 (set (reg/f:DI 86)
        (const_int 40 [0x28])) "ns.c":8:1 74 {*movdi_internal}
     (nil))
(insn 4 3 7 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 19 frame)
                        (const_int -8 [0xfffffffffffffff8])) [2 D.3268+0 S8 A64])
                (unspec:DI [
                        (mem/v/f:DI (reg/f:DI 86) [3 MEM[(<address-space-1> long unsigned int *)40B]+0 S8 A64 AS1])
                    ] UNSPEC_SP_SET))
            (set (scratch:DI)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) "ns.c":8:1 1159 {stack_protect_set_1_di}
     (nil))
(insn 7 4 8 2 (parallel [
            (set (reg:DI 87)
                (plus:DI (reg/f:DI 19 frame)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) "ns.c":11:7 210 {*adddi_1}
     (nil))
(insn 8 7 9 2 (parallel [
            (set (reg:DI 88)
                (plus:DI (reg/f:DI 19 frame)
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
        ]) "ns.c":11:7 210 {*adddi_1}
     (nil))
(insn 9 8 10 2 (set (reg:DI 1 dx)
        (reg:DI 87)) "ns.c":11:7 74 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:DI 4 si)
        (reg:DI 88)) "ns.c":11:7 74 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg:DI 89)
        (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7fd1afc511b0 *.LC1>)) "ns.c":11:7 74 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 5 di)
        (reg:DI 89)) "ns.c":11:7 74 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC1") [flags 0x2]  <var_decl 0x7fd1afc511b0 *.LC1>)
        (nil)))
(insn 13 12 14 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) "ns.c":11:7 77 {*movqi_internal}
     (nil))
(call_insn 14 13 15 2 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:DI ("*__isoc99_scanf") [flags 0x41]  <function_decl 0x7fd1afeecd00 scanf>) [0 __builtin_scanf S1 A8])
            (const_int 0 [0]))) "ns.c":11:7 824 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("*__isoc99_scanf") [flags 0x41]  <function_decl 0x7fd1afeecd00 scanf>)
        (nil))
    (expr_list (use (reg:QI 0 ax))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 15 14 16 2 (set (reg/v:SI 84 [ res ])
        (reg:SI 0 ax)) "ns.c":11:7 75 {*movsi_internal}
     (nil))
(insn 16 15 17 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:SI 84 [ res ])
            (const_int 2 [0x2]))) "ns.c":13:1 11 {*cmpsi_1}
     (nil))
(jump_insn 17 16 18 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 28)
            (pc))) "ns.c":13:1 806 {*jcc}
     (int_list:REG_BR_PROB 1073312332 (nil))
 -> 28)
(note 18 17 19 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 20 3 (set (reg:DI 90)
        (symbol_ref:DI ("__PRETTY_FUNCTION__.0") [flags 0x2]  <var_decl 0x7fd1b0000870 __PRETTY_FUNCTION__>)) "ns.c":13:1 74 {*movdi_internal}
     (nil))
(insn 20 19 21 3 (set (reg:DI 2 cx)
        (reg:DI 90)) "ns.c":13:1 74 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref:DI ("__PRETTY_FUNCTION__.0") [flags 0x2]  <var_decl 0x7fd1b0000870 __PRETTY_FUNCTION__>)
        (nil)))
(insn 21 20 22 3 (set (reg:SI 1 dx)
        (const_int 13 [0xd])) "ns.c":13:1 75 {*movsi_internal}
     (nil))
(insn 22 21 23 3 (set (reg:DI 91)
        (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7fd1afc51240 *.LC2>)) "ns.c":13:1 74 {*movdi_internal}
     (nil))
(insn 23 22 24 3 (set (reg:DI 4 si)
        (reg:DI 91)) "ns.c":13:1 74 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC2") [flags 0x2]  <var_decl 0x7fd1afc51240 *.LC2>)
        (nil)))
(insn 24 23 25 3 (set (reg:DI 92)
        (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7fd1afc512d0 *.LC3>)) "ns.c":13:1 74 {*movdi_internal}
     (nil))
(insn 25 24 26 3 (set (reg:DI 5 di)
        (reg:DI 92)) "ns.c":13:1 74 {*movdi_internal}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC3") [flags 0x2]  <var_decl 0x7fd1afc512d0 *.LC3>)
        (nil)))
(call_insn 26 25 28 3 (call (mem:QI (symbol_ref:DI ("__assert_fail") [flags 0x41]  <function_decl 0x7fd1aff97b00 __assert_fail>) [0 __assert_fail S1 A8])
        (const_int 0 [0])) "ns.c":13:1 813 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__assert_fail") [flags 0x41]  <function_decl 0x7fd1aff97b00 __assert_fail>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(code_label 28 26 29 4 14 (nil) [1 uses])
(note 29 28 30 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 30 29 31 4 (set (reg:SI 93)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -12 [0xfffffffffffffff4])) [1 y+0 S4 A32])) "ns.c":15:1 75 {*movsi_internal}
     (nil))
(insn 31 30 32 4 (set (reg:SI 94)
        (mem/c:SI (plus:DI (reg/f:DI 19 frame)
                (const_int -16 [0xfffffffffffffff0])) [1 x+0 S4 A64])) "ns.c":15:1 75 {*movsi_internal}
     (nil))
(insn 32 31 33 4 (set (reg:SI 4 si)
        (reg:SI 93)) "ns.c":15:1 75 {*movsi_internal}
     (nil))
(insn 33 32 34 4 (set (reg:SI 5 di)
        (reg:SI 94)) "ns.c":15:1 75 {*movsi_internal}
     (nil))
(call_insn 34 33 35 4 (call (mem:QI (symbol_ref:DI ("print_conv") [flags 0x3]  <function_decl 0x7fd1afc1bd00 print_conv>) [0 print_conv S1 A8])
        (const_int 0 [0])) "ns.c":15:1 813 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("print_conv") [flags 0x3]  <function_decl 0x7fd1afc1bd00 print_conv>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:SI (use (reg:SI 5 di))
        (expr_list:SI (use (reg:SI 4 si))
            (nil))))
(insn 35 34 39 4 (set (reg:SI 85 [ <retval> ])
        (const_int 0 [0])) "ns.c":17:1 75 {*movsi_internal}
     (nil))
(insn 39 35 40 4 (set (reg/f:DI 96)
        (const_int 40 [0x28])) "ns.c":17:1 74 {*movdi_internal}
     (nil))
(insn 40 39 41 4 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 19 frame)
                                (const_int -8 [0xfffffffffffffff8])) [2 D.3268+0 S8 A64])
                        (mem/v/f:DI (reg/f:DI 96) [3 MEM[(<address-space-1> long unsigned int *)40B]+0 S8 A64 AS1])
                    ] UNSPEC_SP_TEST))
            (clobber (scratch:DI))
        ]) "ns.c":17:1 1164 {stack_protect_test_1_di}
     (nil))
(jump_insn 41 40 48 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 44)
            (pc))) "ns.c":17:1 806 {*jcc}
     (int_list:REG_BR_PROB 1073312332 (nil))
 -> 44)
(note 48 41 42 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(call_insn 42 48 44 5 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7fd1afc2e900 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) "ns.c":17:1 813 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7fd1afc2e900 __stack_chk_fail>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (nil))
(code_label 44 42 49 6 15 (nil) [1 uses])
(note 49 44 45 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 45 49 46 6 (set (reg/i:SI 0 ax)
        (reg:SI 85 [ <retval> ])) "ns.c":17:1 75 {*movsi_internal}
     (nil))
(insn 46 45 0 6 (use (reg/i:SI 0 ax)) "ns.c":17:1 -1
     (nil))
