
;; Function print_conv (print_conv, funcdef_no=40, decl_uid=3195, cgraph_uid=41, symbol_order=40)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
x = &NONLOCAL
y = &NONLOCAL
num = &NULL
x_24 = x_17
x_24 = x
k_25 = k_18
k_25 = &NULL
_1 = x_24 + UNKNOWN
num = _1
x_17 = x_24 + UNKNOWN
k_18 = k_25 + UNKNOWN
k_18 = &NONLOCAL
k_27 = k_25
k_27 = k_14
k_14 = k_27 + UNKNOWN
k_14 = &NONLOCAL
_2 = num
ESCAPED = &NONLOCAL
ESCAPED = &STRING
ESCAPED = _2

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL STRING ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
x = { NONLOCAL }
y = { NONLOCAL } same as x
num = { NULL NONLOCAL }
x_24 = { NONLOCAL }
x_17 = { NONLOCAL }
k_25 = { NULL NONLOCAL }
k_18 = { NULL NONLOCAL }
_1 = { NONLOCAL }
k_27 = { NULL NONLOCAL }
k_14 = { NULL NONLOCAL }
_2 = { NULL NONLOCAL } same as num
__printf_chk = { }


Alias information for print_conv

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information


;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 7 3 9 8 4 5 6
;;
;; Loop 2
;;  header 4, latch 8
;;  depth 1, outer 0
;;  nodes: 4 8
;;
;; Loop 1
;;  header 3, latch 9
;;  depth 1, outer 0
;;  nodes: 3 9
;; 2 succs { 7 5 }
;; 7 succs { 3 }
;; 3 succs { 9 6 }
;; 9 succs { 3 }
;; 8 succs { 4 }
;; 4 succs { 8 5 }
;; 5 succs { 1 }
;; 6 succs { 4 }
Removing basic block 6
Removing basic block 7
Removing basic block 9
Removing basic block 10
Removing basic block 11
find_duplicates: <bb 8> duplicate of <bb 11>
Removing basic block 11

Symbols to be put in SSA form
{ D.3224 }
Incremental SSA update started at block: 0
Number of blocks in CFG: 12
Number of blocks to update: 10 ( 83%)


Removing basic block 7
Merging blocks 8 and 6
Removing basic block 9
Removing basic block 10
void print_conv (unsigned int x, unsigned int y)
{
  int k;
  unsigned int num[32];
  unsigned int _1;
  unsigned int prephitmp_6;
  unsigned int pretmp_21;

  <bb 2> [local count: 118111600]:
  num = {};
  if (x_11(D) != 0)
    goto <bb 4>; [89.00%]
  else
    goto <bb 3>; [11.00%]

  <bb 3> [local count: 118111600]:
  num ={v} {CLOBBER};
  return;

  <bb 4> [local count: 955630225]:
  # x_24 = PHI <x_17(4), x_11(D)(2)>
  # k_25 = PHI <k_18(4), 0(2)>
  _1 = x_24 % y_15(D);
  num[k_25] = _1;
  x_17 = x_24 / y_15(D);
  k_18 = k_25 + 1;
  if (y_15(D) <= x_24)
    goto <bb 4>; [89.00%]
  else
    goto <bb 6>; [11.00%]

  <bb 5> [local count: 850510901]:
  pretmp_21 = num[k_14];

  <bb 6> [local count: 955630225]:
  # k_27 = PHI <k_25(4), k_14(5)>
  # prephitmp_6 = PHI <_1(4), pretmp_21(5)>
  k_14 = k_27 + -1;
  __printf_chk (1, "%u", prephitmp_6);
  if (k_14 != -1)
    goto <bb 5>; [89.00%]
  else
    goto <bb 3>; [11.00%]

}



;; Function main (main, funcdef_no=39, decl_uid=3196, cgraph_uid=40, symbol_order=39) (executed once)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
ESCAPED = &STRING
ESCAPED = &x
ESCAPED = &y
res_5 = NONLOCAL
ESCAPED = &STRING
ESCAPED = &STRING
ESCAPED = &NONLOCAL
__PRETTY_FUNCTION__.0 = NONLOCAL
ESCAPED = &__PRETTY_FUNCTION__.0
y.0_1 = y
x.1_2 = x
ESCAPED = x.1_2
ESCAPED = y.0_1

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences
Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles
Solving graph

Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { STRING ESCAPED NONLOCAL x y __PRETTY_FUNCTION__.0 }
NONLOCAL = { ESCAPED NONLOCAL } same as res_5
STOREDANYTHING = { }
INTEGER = { ANYTHING }
x = { ESCAPED NONLOCAL } same as x.1_2
y = { ESCAPED NONLOCAL } same as y.0_1
__PRETTY_FUNCTION__.0 = { ESCAPED NONLOCAL }
*__isoc99_scanf = { }
res_5 = { ESCAPED NONLOCAL }
__assert_fail = { }
y.0_1 = { ESCAPED NONLOCAL }
x.1_2 = { ESCAPED NONLOCAL }
print_conv = { }
main = { }


Alias information for main

Aliased symbols

y, UID D.3199, unsigned int, is addressable
x, UID D.3198, unsigned int, is addressable

Call clobber information

ESCAPED, points-to non-local, points-to vars: { D.3198 D.3199 D.3201 } (nonlocal, escaped)

Flow-insensitive points-to information


;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 4 3 }
;; 3 succs { }
;; 4 succs { 1 }
int main ()
{
  static const char __PRETTY_FUNCTION__[5] = "main";
  int res;
  unsigned int y;
  unsigned int x;
  unsigned int y.0_1;
  unsigned int x.1_2;

  <bb 2> [local count: 1073741824]:
  res_5 = scanf ("%u%u", &x, &y);
  if (res_5 == 2)
    goto <bb 4>; [99.96%]
  else
    goto <bb 3>; [0.04%]

  <bb 3> [local count: 429496]:
  __assert_fail ("res==2", "ns.c", 13, &__PRETTY_FUNCTION__);

  <bb 4> [local count: 1073312329]:
  y.0_1 = y;
  x.1_2 = x;
  print_conv (x.1_2, y.0_1);
  x ={v} {CLOBBER};
  y ={v} {CLOBBER};
  return 0;

}


