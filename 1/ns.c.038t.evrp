
;; Function printf (printf, funcdef_no=15, decl_uid=964, cgraph_uid=16, symbol_order=15)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }

Value ranges after Early VRP:

__fmt_2(D): const char * restrict [1B, +INF]
_4: int VARYING


__attribute__((artificial, gnu_inline, always_inline))
__attribute__((nonnull (1), format (printf, 1, 2)))
int printf (const char * restrict __fmt)
{
  int _4;

  <bb 2> :
  _4 = __printf_chk (1, __fmt_2(D), __builtin_va_arg_pack ());
  return _4;

}



;; Function print_conv (print_conv, funcdef_no=40, decl_uid=3195, cgraph_uid=41, symbol_order=40)

;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8
;;
;; Loop 2
;;  header 7, latch 6
;;  depth 1, outer 0
;;  nodes: 7 6
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 7 }
;; 6 succs { 7 }
;; 7 succs { 6 8 }
;; 8 succs { 1 }

SSA replacement table
N_i -> { O_1 ... O_j } means that N_i replaces O_1, ..., O_j

k_11 -> { k_5 }
Incremental SSA update started at block: 4
Number of blocks in CFG: 9
Number of blocks to update: 3 ( 33%)


Simplified relational if (k_6 >= 0)
 into if (k_6 != -1)

EVRP:hybrid: Second query simplifed stmt

Value ranges after Early VRP:

_1: unsigned int [0, 4294967294]
_3: unsigned int VARYING
x_4: unsigned int VARYING
k_5: int [0, 32]
k_6: int [-33, k_13]
k_11: int [0, 32]
x_12(D): unsigned int VARYING
k_13: int [-1, 31]
k_15: int VARYING
y_17(D): unsigned int VARYING
x_19: unsigned int VARYING
k_20: int [1, 33]
_21: int VARYING


void print_conv (unsigned int x, unsigned int y)
{
  int k;
  unsigned int num[32];
  unsigned int _1;
  unsigned int _3;
  int _21;

  <bb 2> :
  num = {};
  goto <bb 4>; [INV]

  <bb 3> :
  _1 = x_4 % y_17(D);
  num[k_5] = _1;
  x_19 = x_4 / y_17(D);
  k_20 = k_5 + 1;

  <bb 4> :
  # x_4 = PHI <x_12(D)(2), x_19(3)>
  # k_5 = PHI <0(2), k_20(3)>
  if (x_4 != 0)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  # k_11 = PHI <k_5(4)>
  k_13 = k_11 + -1;
  goto <bb 7>; [INV]

  <bb 6> :
  k_15 = k_6 + -1;
  _3 = num[k_6];
  _21 = __printf_chk (1, "%u", _3);

  <bb 7> :
  # k_6 = PHI <k_13(5), k_15(6)>
  if (k_6 != -1)
    goto <bb 6>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 8> :
  num ={v} {CLOBBER};
  return;

}



;; Function main (main, funcdef_no=39, decl_uid=3196, cgraph_uid=40, symbol_order=39)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4
;; 2 succs { 4 3 }
;; 3 succs { }
;; 4 succs { 1 }

Value ranges after Early VRP:

y.0_1: unsigned int VARYING
x.1_2: unsigned int VARYING
res_5: int VARYING


int main ()
{
  static const char __PRETTY_FUNCTION__[5] = "main";
  int res;
  unsigned int y;
  unsigned int x;
  unsigned int y.0_1;
  unsigned int x.1_2;

  <bb 2> :
  res_5 = scanf ("%u%u", &x, &y);
  if (res_5 == 2)
    goto <bb 4>; [INV]
  else
    goto <bb 3>; [INV]

  <bb 3> :
  __assert_fail ("res==2", "ns.c", 13, &__PRETTY_FUNCTION__);

  <bb 4> :
  y.0_1 = y;
  x.1_2 = x;
  print_conv (x.1_2, y.0_1);
  x ={v} {CLOBBER};
  y ={v} {CLOBBER};
  return 0;

}


